<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Okta Developer</title>
    <description>Secure, scalable, and highly available authentication and user management for any app.
</description>
    <link>https://developer.okta.com</link>
    <atom:link href="https://developer.okta.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Hello, Okta. It’s me, Dave</title>
        <description>&lt;p&gt;I’m excited to announce that I have joined Okta’s developer relations team as a full-time Senior Developer Advocate. I will focus on the JavaScript community, including Node.js, Vue, and React.&lt;/p&gt;

&lt;p&gt;I’ve known Okta’s developer relations team since they were independent at Stormpath. When Okta acquired Stormpath, many of my friends made the transition to the Okta team. It’s been amazing to see the progress they’ve made in the last year at Okta, rolling out beautiful products and experiences to developers.&lt;/p&gt;

&lt;h2 id=&quot;who-is-dave-should-you-trust-him&quot;&gt;Who is Dave? Should you trust him?&lt;/h2&gt;

&lt;p&gt;I’m a JavaScript developer and community organizer based in San Francisco. You may have seen me at the &lt;a href=&quot;https://www.meetup.com/jsmeetup/&quot;&gt;SF JavaScript Meetup&lt;/a&gt; or emceeing the &lt;a href=&quot;https://forwardjs.com/&quot;&gt;ForwardJS conference&lt;/a&gt;. I also help out behind the scenes at other local tech events.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/hello-okta-dave/banner-drnugent-panel-4816720055554047372c2d175c32386b93816018fcd8504a5d743a2126a9007c.jpg&quot; alt=&quot;Dave on a panel at Chain React&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These days, it seems like JavaScript owns my entire life, but I actually started off my career in astrobiology. I worked for NASA building instruments, reducing data, and going on missions to study meteor showers. I also rocked a killer 90s haircut (front row, second from left:)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/hello-okta-dave/banner-drnugent-nasa-a4db33414d663b4e9407c9a68b4694abf60a36ed2d117f013a65a5ab1cbe3c95.jpg&quot; alt=&quot;The 1999 Leonid Multi-Instrument Aircraft campaign crew&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the support of my mentor and colleagues, I was able to collect a bunch of data and publish a few peer-reviewed papers, but my heart was always more on the software side of things. I left NASA and completed a degree in Software Engineering from Carnegie Mellon, and started working for startups in San Francisco. Some of these startups would exist for more than a few months, which was quite gratifying!&lt;/p&gt;

&lt;p&gt;(And no, &lt;em&gt;you should not trust me&lt;/em&gt; unless I have been properly &lt;a href=&quot;https://developer.okta.com/product/authorization/&quot;&gt;authorized&lt;/a&gt; and &lt;a href=&quot;https://developer.okta.com/product/authentication/&quot;&gt;authenticated&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;what-will-i-do-at-okta&quot;&gt;What will I do at Okta?&lt;/h2&gt;

&lt;p&gt;Now as a Senior Developer Advocate at Okta, I get to bring together JavaScript, technology, and people, and work with the great team you know from this blog.&lt;/p&gt;

&lt;p&gt;Most developers know Okta from our single sign-on or multi-factor auth products. However, Okta also exposes APIs that let developers do user authentication, authorization, API access management, and secure user management. Our &lt;a href=&quot;https://developer.okta.com/&quot;&gt;developer site&lt;/a&gt; has up-to-date SDKs and tutorials for JavaScript developers, as well as Quickstart Guides for &lt;a href=&quot;https://developer.okta.com/quickstart/#/react/nodejs/generic&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://developer.okta.com/code/vue/&quot;&gt;Vue&lt;/a&gt;, &lt;a href=&quot;https://developer.okta.com/code/angular/&quot;&gt;Angular&lt;/a&gt; and &lt;a href=&quot;https://developer.okta.com/code/javascript/&quot;&gt;vanilla JS&lt;/a&gt;. I’m excited to help simplify and improve these experiences, and build integrations to help you code cool projects.&lt;/p&gt;

&lt;h2 id=&quot;looking-forward&quot;&gt;Looking forward&lt;/h2&gt;

&lt;p&gt;I’m excited to keep bringing the good word of JavaScript to the community here at Okta. The best way to get in touch with me on Twitter at &lt;a href=&quot;https://twitter.com/drnugent&quot;&gt;@drnugent&lt;/a&gt; and now also &lt;a href=&quot;https://twitter.com/OktaDev&quot;&gt;@oktadev&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Apr 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/04/20/hello-okta-dave</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/04/20/hello-okta-dave</guid>
      </item>
    
      <item>
        <title>Build Server Side Authentication in Grails with OAuth 2.0 and Okta</title>
        <description>&lt;p&gt;What is Grails, what is Groovy, and why would we choose them over Spring Boot? In this post I’ll walk you through implementing server-side authentication in Grails using OAuth 2.0 and Okta. Before we dive in, however, I want to talk a little bit about why you’d be using Grails + Groovy in the first place, and how it can make your life easier in specific situations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://grails.org/&quot;&gt;Grails&lt;/a&gt; is an open source “convention over configuration” web application framework built on Groovy. It’s essentially a JVM version of Ruby on Rails. It’s opinionated and full-featured and has a strong emphasis on ORM, templating, and plugins. Grails is built on Spring Boot.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt; is a superset of Java that compiles down to JVM bytecode and interoperable with pure Java, but adds tons of great meta-programming and functional programming features, while also slashing the ceremony code that can plague pure java.&lt;/p&gt;

&lt;h2 id=&quot;why-use-grails-over-spring-boot&quot;&gt;Why Use Grails Over Spring Boot?&lt;/h2&gt;

&lt;p&gt;If Grails is built on Spring Boot, why not just use that? Good question! The answer depends on your goals and your background (ie, do you already know and love Spring?).&lt;/p&gt;

&lt;p&gt;Let’s look at Grails + Groovy:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Grails and Groovy may be easier to dive into if you’re not already familiar with Spring&lt;/li&gt;
  &lt;li&gt;Grails has a great templating system and full-featured ORM&lt;/li&gt;
  &lt;li&gt;Grails is built on Spring Boot, so (theoretically, at least) you can get the best of both worlds. In practice this might be easier said than done.&lt;/li&gt;
  &lt;li&gt;Grails has super easy JSON conversion and test-driven development&lt;/li&gt;
  &lt;li&gt;Groovy is a super awesome language that’s a pleasure to develop in&lt;/li&gt;
  &lt;li&gt;Grails may be waning in popularity. The upgrade from 2.x to 3.x was bumpy and caused a lot of grumbling in the community.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at Spring:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Boot is great for simple REST API services&lt;/li&gt;
  &lt;li&gt;Spring Data is super powerful but correspondingly complicated&lt;/li&gt;
  &lt;li&gt;Templating in Spring is pretty old-fashioned these days&lt;/li&gt;
  &lt;li&gt;Spring has a HUGE community and massive enterprise support.&lt;/li&gt;
  &lt;li&gt;Spring also has easy JSON conversion and TDD&lt;/li&gt;
  &lt;li&gt;The larger Spring architecture is incredibly powerful once you wrap your head around it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what’s the verdict? My suggestions are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you’re not already into Spring, and you want to develop a web application quickly, go with Grails. It’s easy and developer friendly by design.&lt;/li&gt;
  &lt;li&gt;For simple REST services, Spring Boot or Apache Jersey + Shiro might be good alternatives. There’s really no point in using Grails if you’re not going to use the ORM and/or templating capabilities.&lt;/li&gt;
  &lt;li&gt;If you’re building a large enterprise app or API system and require a guarantee of long term support (many years), or are already deep into Spring, then Spring Boot may be your best bet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-started-with-grails&quot;&gt;Get Started with Grails&lt;/h2&gt;

&lt;p&gt;Let’s start by installing Grails. Groovy and Grails use an install/update manager called SDKMAN. The install is super easy, and we’ll walk you through it below, but if you’d like to see the complete instructions, look &lt;a href=&quot;http://grails.org/download.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install SDKMAN:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# follow instructions to install SDKMAN!&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; get.sdkman.io | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Load SDKMAN into your shell:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.sdkman/bin/sdkman-init.sh&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install the latest stable version of Grails:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sdk install grails
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Test the install (should look something like this):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;grails -version
| Grails Version: 3.3.3
| Groovy Version: 2.4.14
| JVM Version: 1.8.0_102
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;create-your-new-grails-application&quot;&gt;Create Your New Grails Application&lt;/h2&gt;

&lt;p&gt;Grails uses a command-line shell similar to Ruby or React. We will be creating a simple app called “OktaCameraKit” that we uses can use to organize their camera lenses.&lt;/p&gt;

&lt;p&gt;In the shell, move to a directory in which you would like the new project generated and enter the following.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grails create-app OktaCameraKit
| Application created at /okta/grails/OktaCameraKit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should have created your application in the “OktaCameraKit” subdirectory with the following directory structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/dir-list-a438a6e22b605ca2b1d73364200e5af8c67a9e5d634fcb63939ac743bff22ce5.png&quot; alt=&quot;New Project Directory List&quot; width=&quot;400&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;test-your-new-grails-app&quot;&gt;Test Your New Grails App&lt;/h3&gt;

&lt;p&gt;“cd” into the “OktaCameraKit” directory and run:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grails run-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;| Running application...
:compileJava NO-SOURCE
:compileGroovy UP-TO-DATE
:buildProperties UP-TO-DATE
:processResources
:classes
:findMainClass
:bootRun
Grails application running at http://localhost:8080 in environment: development
&amp;lt;===========--&amp;gt; 85% EXECUTING
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open your browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; and you should see the Grails welcome screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/initial-grails-3fe59d3daedabba5e986d53fb9733075993037cf540a3b0e751224b9c983a3c9.png&quot; alt=&quot;Initial Grails page&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; I heartily suggest downloading and trying out the Community Edition of IntelliJ IDEA. JetBrains products are fantastic, and the free Community Edition of their premier Java development IDE is a godsend. &lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;Check it out!&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-basics-on-grails&quot;&gt;Some Basics on Grails&lt;/h3&gt;

&lt;p&gt;The basic idea in Grails is that Controller classes have Action methods that load data from Models and map the data that is presented in Views.&lt;/p&gt;

&lt;p&gt;Grails is opinionated and expects controllers to be in the “controllers” directory and “views” to be in the views directory. DO NOT, UNDER ANY CIRCUMSTANCES, PUT FILES IN THE WRONG PLACE. You will hurt Grails’ feelings and it may not work for you. But seriously, if you’re used to more contemporary Javascript frameworks, you may not be used to the well-defined structure that Grails expects. If you surrender to it, you may learn to love it! A good structure can free you to worry about more important things, like writing your app! You certainly end up with fewer lines of code like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blah&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;dont-forget-about-gradle&quot;&gt;Don’t Forget About Gradle&lt;/h3&gt;

&lt;p&gt;What’s with all the “G”s? Yep. There’s a lot of them: Groovy, Grails, Gradle. It’s been scientifically proven that alliteration increases the performance of programming toolkits at developer conferences.&lt;/p&gt;

&lt;p&gt;Gradle is a super powerful build system that “eclipsed” Maven as the build tool of choice in the JVM world. It’s built on Groovy and uses a Domain Specific Language that makes it infinitely powerful. If the universe had been built with Maven, the earth would not be revolving around the sun because we’d still be resolving dependencies. Fortunately, Gradle was invented, and all is well.&lt;/p&gt;

&lt;h2 id=&quot;add-authentication-with-spring-security-and-okta&quot;&gt;Add Authentication with Spring Security and Okta&lt;/h2&gt;

&lt;p&gt;We are going to use the Spring Security Core Plugin and the Spring Security OAuth 2.0 plugin to connect with Okta OAuth. There are, however, a few other options. Apache Shiro has a plugin that integrates nicely with Grails. Shiro is a fine alternative that is worth examining. If you are building an API service that will have client-side authentication, then you might want to look at the &lt;a href=&quot;https://github.com/okta/okta-spring-boot&quot;&gt;Okta Spring Boot Starter&lt;/a&gt;, which makes authentication super simple, and &lt;a href=&quot;https://github.com/ZacharyKlein/grails-react-okta-demo&quot;&gt;Zachary Klein’s Grails + React + Okta demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because we will be using a purely server-side authentication flow, we can’t use the authentication filter method implemented in the Spring Boot Starter.&lt;/p&gt;

&lt;p&gt;Now, you may be tempted to think: “Hey! Grails is just Spring Boot with some bells and whistles. Why can’t I just use Spring authentication, &lt;a href=&quot;/blog/2017/11/20/add-sso-spring-boot-15-min&quot;&gt;like in this great Okta tutorial&lt;/a&gt;?” I know I did. That was what I tried first. Let me save you some time, it doesn’t work.&lt;/p&gt;

&lt;p&gt;Spring Security does a funny thing and uses thrown exceptions to handle the OAuth redirects. These are supposed to propagate up to the Spring servlet context, where they are caught and handled. Unfortunately, Grails has it’s own custom &lt;code class=&quot;highlighter-rouge&quot;&gt;GrailsDispatcherServlet&lt;/code&gt; that overrides this behavior, catching the exceptions before they can be handled by the Spring filters. You could potentially create a subclass of the &lt;code class=&quot;highlighter-rouge&quot;&gt;GrailsDispatcherServlet&lt;/code&gt; that checks for the OAuth exceptions and re-throws them, but Grails 3.0 made this more complicated – and anyway the whole scheme starts to feel pretty “hacky” fighting the framework instead of doing it the “right” way.&lt;/p&gt;

&lt;h3 id=&quot;okta-provider-plugin-for-grails-spring-security-oauth-20&quot;&gt;Okta Provider Plugin for Grails Spring Security OAuth 2.0&lt;/h3&gt;

&lt;p&gt;What’s the “right” way? Writing a provider plugin for the Grails &lt;a href=&quot;http://plugins.grails.org/plugin/matrixcrawler/spring-security-oauth2&quot;&gt;spring-security-oauth2 plugin&lt;/a&gt; that tells Grails how to “talk” to Okta as an OAuth 2.0 provider.&lt;/p&gt;

&lt;p&gt;Fortunately for you, &lt;a href=&quot;https://github.com/moksamedia/okta-oauth2-service&quot;&gt;I’ve already done this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don’t already have an account with Okta, now would be a great time to sign up for a &lt;a href=&quot;https://developer.okta.com/&quot;&gt;free developer account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don’t forget to note your Okta URL as we’ll need it in a minute.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/okta-org-created-7f3cfbf6addba2b0b7c87befcc4df6f0552cd9b50ecffc6252d7dc3c31175dff.png&quot; alt=&quot;Okta organization created&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-your-okta-application&quot;&gt;Create Your Okta Application&lt;/h3&gt;

&lt;p&gt;Once you’ve logged into your Okta dashboard, you need to create an Application. You also need an Authorization Server, but fortunately for the purposes of this tutorial we can just use the default one.&lt;/p&gt;

&lt;p&gt;From your Okta admin panel, click on Applications in the top menu and then click “Add Application”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/app-setup-765547de8021265463dbf3529dfdf3d904796c01d8694d9fbaf7021fbb0ceb44.png&quot; alt=&quot;Configure Okta application&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the web application icon and then click Next.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/add-application-web-1eb94a4cb7e34113c656e2c1b6a811b0f2ffbad3266edebc843da4cf1a226ddb.png&quot; alt=&quot;Add Okta web application&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to update the “Login redirect URIs”. OAuth 2.0 requires a whitelisted redirect URI that the OAuth server can direct the app to after successful login. The URL we’ll be using is: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/oauth2/okta/callback&lt;/code&gt;. Enter that into the field and then hit “Done!”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/add-application-49ca0086fdd9d319e870f0261d64e620da68e18c1cdb2d1a545f2c4853b63eca.jpg&quot; alt=&quot;Add Okta application&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll need to copy your Client ID and Client Secret to a safe place for later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/client-credentials-f2f84fe583bde297131c542f5f3369a2c034748053dee8a0d8b4ece84cd55613.png&quot; alt=&quot;Remember your credentials&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it for Okta setup for our purposes. You can certainly dig MUCH deeper into the OAuth rabbit hole with tons of configuration options. &lt;a href=&quot;https://developer.okta.com/standards/OAuth/&quot;&gt;Take a look here to get started&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dive-back-into-grails&quot;&gt;Dive Back Into Grails!&lt;/h2&gt;

&lt;p&gt;We need to install three dependencies:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://grails-plugins.github.io/grails-spring-security-core/3.2.x/index.html#installation&quot;&gt;Grails Spring Security Core Plugin&lt;/a&gt; (adds core Spring Security features)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MatrixCrawler/grails-spring-security-oauth2&quot;&gt;Grails Spring Security OAuth2 plugin&lt;/a&gt; (adds OAuth 2.0 features)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/moksamedia/okta-oauth2-service&quot;&gt;Okta OAuth 2.0 Provider Plugin&lt;/a&gt; (tells the OAuth plugin how to talk to Okta)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edit your &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file, adding the new Maven repository and the three compile dependencies, as seen below.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;https://dl.bintray.com/moksamedia/plugins&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.grails.plugins:spring-security-core:3.2.1'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.grails.plugins:spring-security-oauth2:1.1.0'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'spring.security.oauth2.okta:spring-security-oauth2-okta:0.1'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/build-config-cf5a3384cbc30f16ef36296185cc96e4c6924a73de5879bdd5fbee7a226c614a.png&quot; alt=&quot;build configuration&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The plugins come with a quickstart script that we need to run to generate some domain files and set up some configurations.&lt;/p&gt;

&lt;p&gt;From your main project directory, run the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grails s2-quickstart com.oktacamerakit User Role
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates your User and Role domain classes and adds some authentication configuration entries in the “grails-app/conf/application.groovy” file.&lt;/p&gt;

&lt;p&gt;Now run the OAuth 2.0 quickstart script:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grails init-oauth2 com.oktacamerakit User OAuthID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The starter script creates an &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuthID&lt;/code&gt; domain class that links the OAuth 2.0 authenticated identities to your local User domain classes, and adds a configuration line to your &lt;code class=&quot;highlighter-rouge&quot;&gt;application.groovy&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;These install scripts did a pretty good job of setting things up, be we still need to make some changes.&lt;/p&gt;

&lt;p&gt;You need to add the following line to you &lt;strong&gt;User.groovy&lt;/strong&gt; domain class. It doesn’t matter where you put it as long as it’s within the class definition.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasMany&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;oAuthIDs:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OAuthID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also need to edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;UserRole.groovy&lt;/code&gt; class slightly. Find the create method and change the default value for the flush param to true. (This particular tip cost me about three hours of my life. You get it for free.)&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRole&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserRole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;user:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;role:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;flush:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we need to add some configuration to the application.yml file. You need to fill in your Client ID for the &lt;code class=&quot;highlighter-rouge&quot;&gt;api_key&lt;/code&gt; and your Client Secret for the &lt;code class=&quot;highlighter-rouge&quot;&gt;api_secret&lt;/code&gt;, as well as your Okta URL in the three URLs.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;grails&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;### other grails config settings ###&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;springsecurity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;active&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;roleNames&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ROLE_USER'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;okta&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;api_key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;Okta&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ID&amp;gt;'&lt;/span&gt;         
                        &lt;span class=&quot;na&quot;&gt;api_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;Okta&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Secret&amp;gt;'&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;userInfoUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>/oauth2/v1/userinfo'&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;authorizeUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>/oauth2/v1/authorize'&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;tokenUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>/oauth2/v1/token'&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;openid'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-the-app-again&quot;&gt;Run the App Again&lt;/h3&gt;

&lt;p&gt;Whew! Lets test all that. Run the app again using &lt;code class=&quot;highlighter-rouge&quot;&gt;grails run-app&lt;/code&gt;. You should see the following. Notice particularly the three new controllers listed below the “Available Controllers” heading.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/welcome-to-grails2-78c7c093793d71b1d0802298af0197c28f133b1bd8bc9b46b5721006ffe7f0e5.png&quot; alt=&quot;Run the application again&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-a-grails-home-controller&quot;&gt;Add A Grails Home Controller&lt;/h2&gt;

&lt;p&gt;Let’s add a Home controller for the app. Use the Grails CLI to add the controller.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grails create-controller Home
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open the &lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController.groovy&lt;/code&gt; file and edit it to match the following. We need to do two things: 1) define our authentication requirement using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Secured&lt;/code&gt; annotation, and 2) add some output text.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.plugin.springsecurity.annotation.Secured&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;nd&quot;&gt;@Secured&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ROLE_USER'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success!!!&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you re-start the app and navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; now you should see the Home controller listed below the authentication related controllers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/available-controllers-798ea4e5d3b6eec273b4c4cf2b3062e0e13b5c35d2d4d39aeec4f6da4cb2c0cb.png&quot; alt=&quot;List available controllers&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;oktacamerakit.HomeController&lt;/code&gt; link at the bottom of the screen, you’ll be taken to a login page. Currently this is a “local” login based on the User domain objects. Since there are no local users, there’s no way to authenticate.&lt;/p&gt;

&lt;p&gt;To fix this, one option would be to add a “Login with Okta” link to the bottom of the login page. This is pretty simple and would require creating a custom login page template and adding the link. We might get back to this in Part II of this tutorial.&lt;/p&gt;

&lt;p&gt;For the moment, we’re going to configure Okta to always redirect to the Okta login page when a user needs to log in. Add the following to you &lt;code class=&quot;highlighter-rouge&quot;&gt;application.groovy&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;grails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springsecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loginFormUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/springSecurityOAuth2/authenticate?provider=okta'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;give-your-new-app-a-whirl&quot;&gt;Give Your New App a Whirl!&lt;/h2&gt;

&lt;p&gt;That’s it! You should be all set.&lt;/p&gt;

&lt;p&gt;Go ahead and log into your developer.okta.com admin panel and sign out. This will force you to log in again through the Grails app instead of automatically being authenticated via OAuth.&lt;/p&gt;

&lt;p&gt;Re-start the app, using &lt;code class=&quot;highlighter-rouge&quot;&gt;grails run-app&lt;/code&gt;, and this time navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/home/index&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first screen you’ll see (if you signed out) is the Okta login screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/okta-login-c7aaa6fb28ad35b26c9a31efad9b70a477f6d1e737463abb5de994d48b1c82c6.png&quot; alt=&quot;Okta Login&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After logging in, you’ll be redirected back to your Grails app, where you’ll see the screen that allows you to either register a new account or link your OAuth account to an existing user account.&lt;/p&gt;

&lt;p&gt;Fill in the top form to register a new user account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/okta-with-grails/grails-user-reg-df445af0f13c85b450be810b9891a58b7de33d61c328ec4cd3ff0c982d2e83ed.png&quot; alt=&quot;Grails user registration&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;congrats-you-built-a-grails-app-with-okta-for-authentication&quot;&gt;Congrats! You Built a Grails App with Okta for Authentication&lt;/h2&gt;

&lt;p&gt;Success! We did it! Pretty simple.&lt;/p&gt;

&lt;p&gt;Obviously there’s a lot we can do from here. We’ll look at building out the app more completely in Part 2 of this tutorial. We need to create some domain and controller classes to model our data, set up some views, and hook our authenticated users into a authorization system. I’ll also show you how to run the remote debugger in IntelliJ, configure logging, and set up the database so development data is persisted between sessions (right now it’s recreated every time the app is run, which is why the app will never remember who you are if you restart).&lt;/p&gt;

&lt;h2 id=&quot;learn-more-about-grails-gradle-groovy-and-okta&quot;&gt;Learn More about Grails, Gradle, Groovy, and Okta&lt;/h2&gt;

&lt;p&gt;If you’d like to learn more about Grails to get ready for Part 2 check out the &lt;a href=&quot;http://docs.grails.org/snapshot/guide/single.html&quot;&gt;documentation&lt;/a&gt; and &lt;a href=&quot;http://groovy-lang.org/documentation.html&quot;&gt;Groovy Language Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While you’re in the Grails docs, make sure to familiarize yourself with the &lt;a href=&quot;http://docs.grails.org/snapshot/guide/single.html#conventionOverConfiguration&quot;&gt;basic folder structure of the Grails application&lt;/a&gt;. As we saw, it can be touchy.&lt;/p&gt;

&lt;p&gt;You may also want to take a look at &lt;a href=&quot;http://docs.grails.org/latest/guide/theWebLayer.html#understandingControllersAndActions&quot;&gt;Understanding Controllers and Actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And finally, you can &lt;a href=&quot;https://docs.gradle.org/4.6/userguide/userguide.html&quot;&gt;check out the Gradle docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’d like to learn more about Okta, you should definitely be following our team on Twitter &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;@oktadev&lt;/a&gt;. You can also check out these other cool Java posts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/11/20/add-sso-spring-boot-15-min&quot;&gt;Add Single Sign-On to Your Spring Boot Web App in 15 Minutes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2018/03/01/develop-microservices-jhipster-oauth&quot;&gt;Develop a Microservices Architecture with OAuth 2.0 and JHipster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/08/23/five-java-tips&quot;&gt;5 Tips for Building your Java API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Apr 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/04/19/okta-with-grails</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/04/19/okta-with-grails</guid>
      </item>
    
      <item>
        <title>Use OpenID Connect for Authorization in Your ASP.NET MVC Framework 4.x App</title>
        <description>&lt;p&gt;A common practice in web applications is to have a restricted area for registered users, and perhaps another for administrators. Whether this restricted access area is premium content, or simply the order history for your e-commerce site’s users, it’s important that it be properly secured. OpenID Connect (OIDC) makes it easy, but it can be tricky to set up in ASP.NET MVC framework. In this post, I’ll show you how to create groups and use the authorization framework that comes with ASP.NET.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-base-aspnet-mvc-4x-application&quot;&gt;Set Up the Base ASP.NET MVC 4.x Application&lt;/h2&gt;

&lt;p&gt;For the base application, start by downloading our &lt;a href=&quot;https://github.com/oktadeveloper/okta-aspnet-mvc-example&quot;&gt;ASP.NET MVC example from GitHub&lt;/a&gt;. You’ll also need to set up your application in Okta. Start by creating a &lt;a href=&quot;https://developer.okta.com/signup/&quot;&gt;forever-free developer account&lt;/a&gt;, or logging in if you already have one. Once you’re at the dashboard in the Okta developer console, create an application with the following settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Application type: Web&lt;/li&gt;
  &lt;li&gt;Allowed grant types: Authorization Code, Implicit (Hybrid) - Allow ID Token&lt;/li&gt;
  &lt;li&gt;Login redirect URI: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/authorization-code/callback&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Logout redirect URI: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/Account/PostLogout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then open the Web.config file and add these keys to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;appSettings&amp;gt;&lt;/code&gt; section:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1. Replace these values with your Okta configuration --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;okta:ClientId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{clientId}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;okta:ClientSecret&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{clientSecret}&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;okta:OrgUri&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>/oauth2/default&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 2. Update the Okta application with these values --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;okta:RedirectUri&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8080/authorization-code/callback&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;okta:PostLogoutRedirectUri&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8080/Account/PostLogout&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-groups-to-the-id-token&quot;&gt;Add Groups to the ID Token&lt;/h2&gt;

&lt;p&gt;First, add two groups to your new application: &lt;em&gt;Users&lt;/em&gt; and &lt;em&gt;Admins&lt;/em&gt;. From the dashboard, hover over the &lt;strong&gt;Users&lt;/strong&gt; menu item and from the drop-down menu choose &lt;strong&gt;Groups&lt;/strong&gt;. On the groups screen, click &lt;strong&gt;Add Group&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/aspnet-authz/CreateGroupScreenshot-756757ba9bd65152afd4f9f13b2bccee798894b3bdd6b8befbebb0bb9210e4a8.png&quot; alt=&quot;Create Groups Screen&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add users, click on the &lt;strong&gt;Users&lt;/strong&gt; menu item. Click on &lt;strong&gt;Add User&lt;/strong&gt; and create two new users. The only required information is first name, last name, and email address. The interface will automatically set the username to the primary email.&lt;/p&gt;

&lt;p&gt;Then make sure to select &lt;strong&gt;Set by Admin&lt;/strong&gt; in the &lt;strong&gt;Password&lt;/strong&gt; drop-down, set the password to something simple and then uncheck the &lt;strong&gt;User must change password on the first login&lt;/strong&gt; checkbox. Finally, click the &lt;strong&gt;Save and Add Another&lt;/strong&gt;, and add another user called &lt;em&gt;Jack Daniels&lt;/em&gt; with the same settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/aspnet-authz/CreateUserScreenshot-a4e1f2b50a9722d2ca84cc7ee526048156e9dbb34999952b5a70222ce5f69b72.png&quot; alt=&quot;Create User Screen&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Add Jim Beam to the &lt;strong&gt;Users&lt;/strong&gt; group and add Jack Daniels to the Admin group. To do this, go back to the &lt;strong&gt;Groups&lt;/strong&gt; page and select the group you want to add people to. Then, click &lt;strong&gt;Manage People&lt;/strong&gt;. When you hover over each person in the listing of users that are not members on the left, there will be a green plus sign button. Click this button to add that person to the selected group.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/aspnet-authz/AddUserToGroupScreenshot-acb3e85c6c45d93f4806401e164601720730df27ae5e6aff85605669467a1fb8.png&quot; alt=&quot;Add User To Group Screen&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you just need to add these groups to the token.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hover over the &lt;strong&gt;API&lt;/strong&gt; menu item and select &lt;strong&gt;Authorization Servers&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Select the default authorization server (it was created for you when you created your Okta account).&lt;/li&gt;
  &lt;li&gt;Choose the Claims tab, and click &lt;strong&gt;Add Claim&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The name of the claim will be “groups”, 
Select &lt;strong&gt;ID Token&lt;/strong&gt; and &lt;strong&gt;Always&lt;/strong&gt; from the &lt;strong&gt;Include in token type&lt;/strong&gt; setting.&lt;/li&gt;
  &lt;li&gt;Choose &lt;strong&gt;Groups&lt;/strong&gt; from the &lt;strong&gt;Value Type&lt;/strong&gt; setting, and &lt;strong&gt;Regex&lt;/strong&gt; from the &lt;strong&gt;Filter&lt;/strong&gt; setting.&lt;/li&gt;
  &lt;li&gt;In the text box type &lt;code class=&quot;highlighter-rouge&quot;&gt;.*&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Finally, make sure the &lt;strong&gt;Disable claim&lt;/strong&gt; checkbox is unchecked and that the &lt;strong&gt;Any scope&lt;/strong&gt; radio button is selected in the &lt;strong&gt;Include in&lt;/strong&gt; setting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/aspnet-authz/AddGroupsToTokenScreenshot-c78196f6d97cb7d76120047046bf9c59468fc758f001e08b175de017db8c58bf.png&quot; alt=&quot;Add Groups to Token Screen&quot; width=&quot;600&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;map-the-openid-connect-groups-to-roles&quot;&gt;Map the OpenID Connect Groups to Roles&lt;/h2&gt;

&lt;p&gt;Once you’ve got groups in the token, you’ll need to map those to roles, since the authorization attributes in ASP.NET MVC uses roles to restrict access. To do this, open the &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup.cs&lt;/code&gt; file, and add in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigureAuth&lt;/code&gt; method, there’s a section of the code that sets up the OpenID Connect authentication called &lt;code class=&quot;highlighter-rouge&quot;&gt;UseOpenIdConnectAuthentication&lt;/code&gt; that takes an argument of type &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenIdConnectAuthenticationOptions&lt;/code&gt;. Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Notification&lt;/code&gt; property, there is a function for &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizationCodeReceived&lt;/code&gt;. Below the &lt;code class=&quot;highlighter-rouge&quot;&gt;nameClaim&lt;/code&gt;, add a loop to go through each of the groups in the token and a &lt;code class=&quot;highlighter-rouge&quot;&gt;RoleType&lt;/code&gt; claim to the &lt;code class=&quot;highlighter-rouge&quot;&gt;identity&lt;/code&gt; object.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfoResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Claims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;groups&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClaimTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now you can use those roles in the authorize attribute.&lt;/p&gt;

&lt;h2 id=&quot;add-restricted-mvc-routes&quot;&gt;Add Restricted MVC Routes&lt;/h2&gt;

&lt;p&gt;To the &lt;code class=&quot;highlighter-rouge&quot;&gt;AccountController&lt;/code&gt;, add some new restricted routes: one for each group.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// previous controller actions removed for brevity&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[Authorize(Roles = &quot;Enthusiasts&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Enthusiast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Authorize(Roles = &quot;Admin&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the authorization should work, but there is one problem. If a user is logged in but does not belong to the correct group, the default &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizeAttribute&lt;/code&gt; will attempt to redirect the user to the login screen for authentication. The login screen will determine that the user is already authenticated and will redirect back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;redirectUri&lt;/code&gt; with the token. The &lt;code class=&quot;highlighter-rouge&quot;&gt;redirectUri&lt;/code&gt; will rebuild the &lt;code class=&quot;highlighter-rouge&quot;&gt;ClaimsPrincipal&lt;/code&gt; and try to redirect the user back to the URL they originally requested. The &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizeAttribute&lt;/code&gt; will run again and begin the cycle all over again.&lt;/p&gt;

&lt;h2 id=&quot;create-a-custom-aspnet-mvc-attribute&quot;&gt;Create a Custom ASP.NET MVC Attribute&lt;/h2&gt;

&lt;p&gt;To avoid this problem, you’ll need to rewire the default behavior of the default &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizeAttribute&lt;/code&gt; by creating a new attribute, and overriding the default behavior when the user is unauthorized. In the main project folder (where the controller folder is), create a new folder called &lt;strong&gt;Helpers&lt;/strong&gt;. Inside that folder create a new C# class called &lt;code class=&quot;highlighter-rouge&quot;&gt;OktaAuthorize&lt;/code&gt;. Change the class so that it inherits from &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizeAttribute&lt;/code&gt; and override the &lt;code class=&quot;highlighter-rouge&quot;&gt;HandleUnauthorizedRequest&lt;/code&gt; method like below.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandleUnauthorizedRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthorizationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HandleUnauthorizedRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;filterContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RedirectToRouteResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RouteValueDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Error&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AccessDenied&quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above code simply checks if the user is logged in. If they are aren’t, the &lt;code class=&quot;highlighter-rouge&quot;&gt;HandleUnauthorizedRequest()&lt;/code&gt; can handle the request just fine. If they are logged in, it redirects to the error controller’s &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessDenied&lt;/code&gt; action.&lt;/p&gt;

&lt;p&gt;Next, you’ll need to create that &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessDenied&lt;/code&gt; action in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorController&lt;/code&gt; so the complete controller looks like below.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ErrorController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// GET: Error&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AccessDenied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, just create a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessDenied&lt;/code&gt; view for the controller.&lt;/p&gt;

&lt;div class=&quot;language-cs highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewBag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AccessDenied&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccessDenied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now be able to run the application and see that if you’re logged in with the Jim Beam user, when you try to navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;account/admin&lt;/code&gt; action, you get redirected to the &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessDenied&lt;/code&gt; page instead of the “unauthorized loop” that you’d get with the default &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizeAttribute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/aspnet-authz/ApplicationRunningScreenshot-6f255c053d4949560c83dce4ef04c00ac08ba9203822e836c93f3217ddcfcfd7.png&quot; alt=&quot;Application Running&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;learn-more-about-aspnet-and-okta&quot;&gt;Learn More About ASP.NET and Okta&lt;/h2&gt;

&lt;p&gt;If you’d like to learn more about how Okta can ease identity management for your applications, check out &lt;a href=&quot;https://developer.okta.com/documentation/&quot;&gt;Okta’s product documentation&lt;/a&gt;. Interested in learning more about ASP.NET? Check out these resources from our blog::&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.okta.com/blog/2018/02/01/secure-aspnetcore-webapi-token-auth&quot;&gt;How to Secure Your .NET Web API with Token Authentication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.okta.com/blog/2018/01/31/build-secure-todo-app-vuejs-aspnetcore&quot;&gt;Build a Secure To-Do App with Vue, ASP.NET Core, and Okta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.okta.com/blog/2018/01/10/build-app-for-ios-android-with-xamarin&quot;&gt;Build an App for iOS and Android with Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And as always, we’d love to hear from you. Hit us up in the comments, or on Twitter &lt;a href=&quot;https://twitter.com/OktaDev&quot;&gt;@oktadev&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Apr 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/04/18/authorization-in-your-aspnet-mvc-4-application</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/04/18/authorization-in-your-aspnet-mvc-4-application</guid>
      </item>
    
      <item>
        <title>WebAuthn: A Developer's Guide to What's on the Horizon</title>
        <description>&lt;p&gt;There’s been a lot of news lately about the new W3C Web Authentication API, also known as WebAuthn. Want to know what it’s all about? Let’s take a closer look.&lt;/p&gt;

&lt;p&gt;The Web Authentication API allows browsers to make use of hardware authenticators such as the Yubikey or a mobile phone’s biometrics, like a thumbprint reader or facial recognition. WebAuthn can be used with these technologies to enable two-factor authentication to websites, or even as the primary authentication mechanism.&lt;/p&gt;

&lt;p&gt;Much of the motivation behind the development of the spec is to reduce reliance on passwords or other authentication methods that are easily phished. The effort began under the FIDO Alliance, and was adopted by the W3C to create the &lt;a href=&quot;https://www.w3.org/TR/webauthn/&quot;&gt;WebAuthn&lt;/a&gt; spec as the major browser vendors got on board.&lt;/p&gt;

&lt;h2 id=&quot;how-does-webauthn-work&quot;&gt;How Does WebAuthn Work?&lt;/h2&gt;

&lt;p&gt;Under the hood, the WebAuthn spec uses &lt;a href=&quot;https://blog.vrypan.net/2013/08/28/public-key-cryptography-for-non-geeks/&quot;&gt;public key cryptography&lt;/a&gt; to provide a way for browsers to sign a challenge using a private key stored by the operating system or on a physical hardware token. The private key never leaves the device, and is never made available to the browser. For hardware tokens like the &lt;a href=&quot;https://www.yubico.com/&quot;&gt;Yubikey&lt;/a&gt;, the private key isn’t even accessible to the underlying operating system!&lt;/p&gt;

&lt;p&gt;If you already have existing users with an existing authentication mechanism, letting users enroll a WebAuthn credential will work something like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have your users log in using their existing credentials&lt;/li&gt;
  &lt;li&gt;Create a new WebAuthn credential and associate it with the user account&lt;/li&gt;
  &lt;li&gt;When the user returns, prompt them for their WebAuthn credential, and once verified, you can sign them in&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A unique property of the WebAuthn API is that it can’t be used to identify users between different websites. The credentials generated are tied to the domain of the website that generated them. This provides an additional layer of privacy to users, since websites can’t use the WebAuthn credential to identify users across domains.&lt;/p&gt;

&lt;h3 id=&quot;the-webauthn-javascript-api&quot;&gt;The WebAuthn JavaScript API&lt;/h3&gt;

&lt;p&gt;The WebAuthn spec defines two new JavaScript APIs available to web applications: &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator.credentials.create&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator.credentials.get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You’ll use the &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator.credentials.create&lt;/code&gt; function to enroll a new authenticator and store the resulting identifier at your server. To set up a new authenticator, you’ll first need to generate 32 random bytes on the server, and provide that to your JavaScript function. These 32 random bytes are part of the data that the authenticator will sign, so it’s important that this be generated by your server so your server knows that the resulting signed challenge was one that it initiated.&lt;/p&gt;

&lt;p&gt;When you want to ask the user to log back in with an existing credential, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator.credentials.get&lt;/code&gt; function to request that the user prove the possession of an existing enrolled device. If they’ve registered multiple devices, you can pass multiple identifiers to the function and the matching one will be returned.&lt;/p&gt;

&lt;p&gt;When the site runs the &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator.credentials.create&lt;/code&gt; function, all available USB keys or other authentication mechanisms will wait for the user to interact with them. In the case of Yubikeys, you’ll see the blinking light on all of them that are currently plugged in. If you specify an existing identifier to the &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator.credentials.get&lt;/code&gt; function, then only that one key will blink.&lt;/p&gt;

&lt;p&gt;See Mozilla’s &lt;a href=&quot;https://hacks.mozilla.org/2018/01/using-hardware-token-based-2fa-with-the-webauthn-api/&quot;&gt;Using Hardware Token-based 2FA with the WebAuthn API&lt;/a&gt; guide for more details on the JavaScript code necessary to make this work.&lt;/p&gt;

&lt;h2 id=&quot;when-can-i-use-webauthn&quot;&gt;When Can I Use WebAuthn?&lt;/h2&gt;

&lt;p&gt;As of April 2018, the WebAuthn API is available in Firefox Nightly, and can be turned on in Chrome by enabling a setting in &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome://flags&lt;/code&gt;. Apple has not yet commented on whether or when WebAuthn will be available in Safari. They were involved with the development of the spec, though, so they will likely be shipping it soon.&lt;/p&gt;

&lt;p&gt;The spec itself is currently a W3C “Candidate Recommendation”, which is the second to last step before it’s finalized as a “Recommendation.”&lt;/p&gt;

&lt;h2 id=&quot;learn-more-about-webauthn&quot;&gt;Learn More About WebAuthn&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2018/01/using-hardware-token-based-2fa-with-the-webauthn-api/&quot;&gt;Using Hardware Token-based 2FA with the WebAuthn API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/dev-guide/device/web-authentication&quot;&gt;Web authentication and Windows Hello&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fidoalliance.org/fido2/&quot;&gt;FIDO2 Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Learn more about &lt;a href=&quot;https://www.okta.com/blog/2018/04/its-a-new-world-with-webauthn-passwordless-authentication-goes-primetime/&quot;&gt;Okta’s plans to support WebAuthn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 17 Apr 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/04/17/webauthn-developers-guide-to-whats-on-the-horizon</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/04/17/webauthn-developers-guide-to-whats-on-the-horizon</guid>
      </item>
    
      <item>
        <title>Add Auth to Your PWA with Okta and Stencil</title>
        <description>&lt;p&gt;&lt;a href=&quot;/blog/2017/07/20/the-ultimate-guide-to-progressive-web-applications&quot;&gt;Progressive Web Applications&lt;/a&gt; (PWAs) are the newest technology on the web dev block and they’ve arrived just in time to solve a growing problem. Many companies are struggling to keep isolated development teams across their organization up-to-date when new features are released. Some companies are even trying to decide if it’s worth the cost to develop both a web app &lt;em&gt;and&lt;/em&gt; a mobile application. Not surprisingly, it’s a headache most companies are looking to avoid. PWAs can give companies a lot of the features they need from a mobile app without the need to manage multiple teams and codebases.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps/&quot;&gt;PWA&lt;/a&gt; performs spectacularly when on a fast connection and still performs well when offline or on Wi-Fi that’s not really fast enough to be called Wi-Fi (sometimes called “Lie-Fi”). It does so via caching and a JavaScript “Service Worker” that intercepts server calls and tries to serve the data from cache first, then when the server finally responds, it will replace the cached data with possibly “fresher” data from the server.&lt;/p&gt;

&lt;p&gt;Recently, the &lt;a href=&quot;https://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt; team released a new project called &lt;a href=&quot;https://stenciljs.com/&quot;&gt;Stencil&lt;/a&gt;. Stencil is a compiler that generates standards-compliant web components. Unlike most JavaScript frameworks, it doesn’t deliver a “framework” of code to the browser. It simply takes the code you write and uses its compiler to create vanilla components. You can also use Stencil’s compiler &lt;em&gt;with&lt;/em&gt; your favorite framework. The &lt;a href=&quot;https://github.com/ionic-team/stencil-app-starter&quot;&gt;Stencil starter project&lt;/a&gt; is the easiest way to get started with Stencil and produces a base application that scores nearly a 100% score on &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt;’s progressive web app scorecard.&lt;/p&gt;

&lt;p&gt;To get started building a PWA using Stencil, clone the starter application and detach it from the GitHub remote.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Stencil is not at a 1.0 release yet (as of this writing). So be aware that if you continue, you’re in early-adopter territory. If you find bugs, &lt;a href=&quot;https://github.com/ionic-team/stencil/issues&quot;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-starter-application&quot;&gt;Set Up the Starter Application&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/ionic-team/stencil-starter.git first-stencil
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;first-stencil
git remote rm origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, install all the dependencies that your new Stencil app will need.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may see a couple of warnings from &lt;code class=&quot;highlighter-rouge&quot;&gt;node-pre-gyp&lt;/code&gt; around &lt;code class=&quot;highlighter-rouge&quot;&gt;fsevents&lt;/code&gt;. There’s nothing to see here. This is just to get around a &lt;a href=&quot;https://github.com/strongloop/fsevents/issues/157&quot;&gt;nasty little npm bug&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, add the Okta Auth SDK (via CDN) to the bottom of the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; page, right before the closing &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ok1static.oktacdn.com/assets/js/sdk/okta-auth-js/1.8.0/okta-auth-js.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While there is an npm package for Okta’s Auth SDK, Stencil has a hard time compiling it. Overall it works better for now if you just use the CDN to include it.&lt;/p&gt;

&lt;p&gt;If you’re like me, the next thing you’ll want to do is run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt; and check the site with Lighthouse. If you do, you’ll notice that the score is &lt;em&gt;kind of&lt;/em&gt; low. In particular, it doesn’t register a service worker or return a 200 when offline, That’s because it’s a &lt;em&gt;development&lt;/em&gt; build, and generally, you don’t want the service worker intercepting server calls and returning cached data in development.&lt;/p&gt;

&lt;p&gt;To ensure an accurate depiction of the kind of PWA you get out of the box with Stencil, make sure to run a &lt;em&gt;production&lt;/em&gt; build using &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt;. Once you do, you’ll see a &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt; folder and inside that folder, you’ll see a &lt;code class=&quot;highlighter-rouge&quot;&gt;sw.js&lt;/code&gt; file. That’s your service worker!&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-okta-application&quot;&gt;Set Up Your Okta Application&lt;/h2&gt;

&lt;p&gt;If you haven’t already done so, create a free-forever developer account at &lt;a href=&quot;https://developer.okta.com/signup/&quot;&gt;https://developer.okta.com/signup/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you’ve registered, click on &lt;strong&gt;Applications&lt;/strong&gt; in the top menu. Then click &lt;strong&gt;Add Application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/add-auth-to-stencil/ApplicationListingScreen-008adbfcd6aba9acfd19054bca9bbd360a1e1d6f58b20ae85aa7532141c65c3f.png&quot; alt=&quot;Application Listing Screen&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will then be taken to the application creation wizard. Choose &lt;strong&gt;Single-Page App&lt;/strong&gt; and click &lt;strong&gt;Next&lt;/strong&gt; at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/add-auth-to-stencil/CreateApplicationScreenSPA-64f2eb2b85fdf060d61b602f1e77fca29f3a07c09a9be1224694b91106581647.png&quot; alt=&quot;Create Application Screen SPA&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the next screen, you’ll see the default settings provided by the single-page application template. Change the name of the application to something more descriptive, like “Stencil SPA”. Also, change the base URIs and the login redirect URIs settings to use port 3333 because that’s where your application will be running. The rest of the default settings are fine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/add-auth-to-stencil/ApplicationSettingStencil-a5ef20862100e81001e35f69cf0c9b7c30155d8f54380e633d33cc1c59ac906b.png&quot; alt=&quot;Application Settings Screen&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Done&lt;/strong&gt; at the bottom.&lt;/p&gt;

&lt;p&gt;Select your newly created application from the listing, and click on the &lt;strong&gt;General&lt;/strong&gt; tab to view the general settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/add-auth-to-stencil/GeneralSettingsClientId-f23a50d696788bf92c681465762a32e578ef6e52f733809722d47c32f9518dc9.png&quot; alt=&quot;General Settings Client Id&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the bottom, you’ll see a &lt;strong&gt;Client ID&lt;/strong&gt; setting (yours won’t be blurred out, obviously). Copy this to use in your Stencil application. You will also need your Okta organization URL, which you can find at the top right of the dashboard page. It will probably look something like “https://dev-XXXXXX.oktapreview.com”.&lt;/p&gt;

&lt;h2 id=&quot;add-the-authentication-component&quot;&gt;Add the Authentication Component&lt;/h2&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt; folder, add a new folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;app-auth&lt;/code&gt;. This is where your login page component will go. You can call it whatever you want, I’m just following the naming conventions set out by the starter app here. I’d definitely recommend deciding on a naming convention early and sticking with it.&lt;/p&gt;

&lt;p&gt;Inside the newly created &lt;code class=&quot;highlighter-rouge&quot;&gt;app-auth&lt;/code&gt; folder create two files: &lt;code class=&quot;highlighter-rouge&quot;&gt;app-auth.css&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;app-auth.tsx&lt;/code&gt;. Start by creating the shell of the &lt;code class=&quot;highlighter-rouge&quot;&gt;app-auth.tsx&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stencil/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app-auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;styleUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app-auth.css'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppAuth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you are like I was, you might be thinking, “What kind of Frankenstein framework is this?”&lt;/p&gt;

&lt;p&gt;You’ll notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt; decorator over the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppAuth&lt;/code&gt; class declaration like Angular, and then a &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method at the bottom like React. To me, that’s the beauty of Stencil. It takes some of the best parts of both popular frameworks and uses them to compile reusable components!&lt;/p&gt;

&lt;h2 id=&quot;add-a-login-form&quot;&gt;Add a Login Form&lt;/h2&gt;

&lt;p&gt;Next, you’ll add the JSX (that’s right, I said it) to the new component. Change the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method to:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app-auth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form-item&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;Username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;autocomplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/label&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form-item&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;autocomplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;current-password&quot;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/label&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form-actions&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is just a regular JSX form, but the login button’s &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; event is currently wired to function that doesn’t exist.&lt;/p&gt;

&lt;h2 id=&quot;add-the-login-methods-dependencies&quot;&gt;Add the Login Method’s Dependencies&lt;/h2&gt;

&lt;p&gt;Before you create that function, you’ll need to set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;OktaAuth&lt;/code&gt; JavaScript object to call the Okta API for authentication. You’ll add the object to the component’s state, so right below the class declaration, add the following line:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will also have to import the &lt;code class=&quot;highlighter-rouge&quot;&gt;@State()&lt;/code&gt; decorator. This is is used for values related to the internal state of the component. In the first &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; statement add State to the deconstruction list.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stencil/core'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You’ll also need to get the username and password values from the form itself, so add an &lt;code class=&quot;highlighter-rouge&quot;&gt;@Element()&lt;/code&gt; to the code right below that &lt;code class=&quot;highlighter-rouge&quot;&gt;@State()&lt;/code&gt; like you just created, so it read like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then also add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Element()&lt;/code&gt; decorator to the import so it reads:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stencil/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One last thing that the &lt;code class=&quot;highlighter-rouge&quot;&gt;login()&lt;/code&gt; function will need is access to the router, so you can redirect the user to their profile page if their authentication is successful. You’ll need a class property, so add it right below the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Element&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HTMLElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RouterHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To import it, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Prop()&lt;/code&gt; decorator to the main import and then import the &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterHistory&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;@stencil/router&lt;/code&gt; right below the core import statement. The &lt;code class=&quot;highlighter-rouge&quot;&gt;@Prop&lt;/code&gt; decorator is used to define properties that can be passed in to your component. In this case, it’s not a passed in value, but it could be if need be. Your final import section should read:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Listen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stencil/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RouterHistory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stencil/router'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;OktaAuth&lt;/code&gt; JavaScript library you brought in from the CDN, add a declaration for it right below the import statements.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OktaAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;add-the-login-method&quot;&gt;Add the Login Method&lt;/h2&gt;

&lt;p&gt;Now you included everything you’ll need to get the login function to authenticate users with your Okta organization. First, set up the &lt;code class=&quot;highlighter-rouge&quot;&gt;OktaAuth&lt;/code&gt; object in the constructor of the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppAuth&lt;/code&gt; class. Right below the property for the &lt;code class=&quot;highlighter-rouge&quot;&gt;RouterHistory&lt;/code&gt; object, add:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OktaAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{yourClientId}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can get your Client ID from that general settings page of your Okta application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/add-auth-to-stencil/GeneralSettingsClientId-f23a50d696788bf92c681465762a32e578ef6e52f733809722d47c32f9518dc9.png&quot; alt=&quot;General Settings Client Id&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll also need your Okta org URL, from the upper-right side of the Okta dashboard page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/add-auth-to-stencil/OktaOrgUrlDashboard-b9283a021008d94d056e5a4ac6d2b130ff00a71e8c4d6a44f7029af95392a8f1.png&quot; alt=&quot;Okta Dashboard Org Url&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now everything is set up for the &lt;code class=&quot;highlighter-rouge&quot;&gt;login()&lt;/code&gt; function, so you’ll create that next. Right above the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method, add a &lt;code class=&quot;highlighter-rouge&quot;&gt;login()&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;signIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SUCCESS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getWithoutPrompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'id_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'openid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'profile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;sessionToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sessionToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;redirectUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://localhost:3333'&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
              &lt;span class=&quot;s1&quot;&gt;'okta_id_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/profile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Unable to handle &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; status code`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since is really the “meat” of the component, I’ll walk you through what’s going on here.&lt;/p&gt;

&lt;p&gt;The first thing, is getting all the inputs inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt; element of the component. Then a user object is created with the username and password from their respective inputs.&lt;/p&gt;

&lt;p&gt;Next the &lt;code class=&quot;highlighter-rouge&quot;&gt;authClient&lt;/code&gt; object is used to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;signIn()&lt;/code&gt; method with the user object that was created. It returns a promise, so you handle the &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; condition by getting the response and check to see if the response’s status is a 200. If it is, call the &lt;code class=&quot;highlighter-rouge&quot;&gt;authClient.token&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;getWithoutPrompt()&lt;/code&gt; method which also returns a promise. It takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;responseType&lt;/code&gt; property which is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;id_token&lt;/code&gt;, because that’s what you want to get from Okta. You’ve also asked for three scopes that will give you the openid, profile, and email data associated with the newly authenticated user. The method need the session token returned from the &lt;code class=&quot;highlighter-rouge&quot;&gt;signIn()&lt;/code&gt; method’s response. Finally, you’ve told the function to call back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;redirectUri&lt;/code&gt;, which was set as a trusted redirect origin in Okta when you created your application.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; condition of this promise, you take the id token received and set it in local storage as &lt;code class=&quot;highlighter-rouge&quot;&gt;okta_id_token&lt;/code&gt;. If all that worked, the user is redirected to the profile page.&lt;/p&gt;

&lt;p&gt;If the response had a status of anything other than 200, it merely throws an error that says it can’t handle any other statuses. Finally, the fail condition for the &lt;code class=&quot;highlighter-rouge&quot;&gt;signIn()&lt;/code&gt; method call simply logs any errors to the console.&lt;/p&gt;

&lt;h2 id=&quot;simplify-login&quot;&gt;Simplify Login&lt;/h2&gt;

&lt;p&gt;While this works, there are two things that would make this component a little nicer: being able to hit enter to log in instead of having to click the login button, and not even showing the login form if the person tries to go the login page when they’re already logged in.&lt;/p&gt;

&lt;p&gt;To achieve this, add a method to take the user directly to the profile page if they’re already logged in. Like React components, Stencil components have lifecycle methods. Instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillMount()&lt;/code&gt; for React, Stencil has a &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillLoad()&lt;/code&gt; method, so that’s what you’ll use here.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;componentWillLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'okta_id_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/profile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simply put, all you’re doing is reading the token from local storage. If one exists, you’re assuming they are logged in and redirecting them to the profile page.&lt;/p&gt;

&lt;p&gt;The last thing that will make this login form easier to use is to add the ability to submit the form with the enter key. Stencil has some built-in listeners for key presses. In this case, use the ‘keydown.enter’ listener. Import the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Listen()&lt;/code&gt; decorator in the very top import statement where you imported &lt;code class=&quot;highlighter-rouge&quot;&gt;Component&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Listen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stencil/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then add a handler for the ‘keydown.enter’ event just below the &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillLoad()&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'keydown.enter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;handleEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;update-the-profile-page&quot;&gt;Update the Profile Page&lt;/h2&gt;

&lt;p&gt;Now that you have a nice login page, update the profile page so that it shows the user’s claims once they’re logged in.&lt;/p&gt;

&lt;p&gt;First, you’ll need a type to put the user’s claims in. So create a new file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;app-profile&lt;/code&gt; folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;AppUser.tsx&lt;/code&gt;. The contents are simple, but long. I simply looked at all the claims in the token stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; and created an interface that matched it. So the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppUser.tsx&lt;/code&gt; file is as follows:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppUser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;ver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;aud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;iat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;jti&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;amr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;idp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;nonce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;preferred_username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;given_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;family_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;zoneinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;email_verified&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;auth_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you have a type to declare for your profile’s user object, update the &lt;code class=&quot;highlighter-rouge&quot;&gt;app-profile.tsx&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The imports at the top should look like:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stencil/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RouterHistory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@stencil/router'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Prop()&lt;/code&gt; line for &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; and replace is with:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RouterHistory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'isServer'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;isServer&lt;/code&gt; property is a special property. Because Stencil supports prerendering and &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; may not be available during prerender, you’ll need to wrap the &lt;code class=&quot;highlighter-rouge&quot;&gt;localStorage&lt;/code&gt; calls in an &lt;code class=&quot;highlighter-rouge&quot;&gt;if(!isServer){}&lt;/code&gt; to make sure it will build for production. This shouldn’t stop it from working, it’s just a work around for the build process.&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillLoad()&lt;/code&gt; method, just read in the user information from the ‘okta_id_token’ in local storage:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;componentWillLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'okta_id_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;claims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will be your protector for the profile page as well, it just checks if the token exists. If so, it loads the claims from it. If not, it redirects to the login page.&lt;/p&gt;

&lt;p&gt;For the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method, change it to display the claims in a list.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;app-profile&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Claims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&amp;gt;: {this.user&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Logout&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only thing left is to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;logout()&lt;/code&gt; method. This will just remove the token from local storage and reload the page, this will force the &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillLoad()&lt;/code&gt; to redirect the user to the login page.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'okta_id_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;set-up-the-login-route&quot;&gt;Set Up the Login Route&lt;/h2&gt;

&lt;p&gt;The only thing left is to add the route to the login component to the application so that users can get there.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;components/my-app/my-app.tsx&lt;/code&gt; file add the route inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;stencil-router&lt;/code&gt; component so that the final section looks like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;stencil-router&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;stencil-route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app-home&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;exact=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{true}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;stencil-route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/profile&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app-profile&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;stencil-route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app-auth&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/stencil-router&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll also need to update the route for the link on the home page. In &lt;code class=&quot;highlighter-rouge&quot;&gt;components/app-home/app-home.tsx&lt;/code&gt; update the &lt;code class=&quot;highlighter-rouge&quot;&gt;stencil-route-link&lt;/code&gt; element’s url to no longer pass in the url parameter.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;stencil-route-link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/profile&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;
    Profile page
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/stencil-route-link&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it! You should now be able to run the app, click on the profile page, get redirected to the login page, and be redirected back to the profile page once you’ve logged in. The profile page should show all your claims after you’ve authenticated.&lt;/p&gt;

&lt;p&gt;Congratulations, you now have a PWA with authentication in it, ready to go conquer the world!&lt;/p&gt;

&lt;h2 id=&quot;add-styles&quot;&gt;Add Styles&lt;/h2&gt;

&lt;p&gt;As extra credit, you might want to add some styling to the login form and the profile page. Below is my style sheet for the login page that goes in &lt;code class=&quot;highlighter-rouge&quot;&gt;app-auth.css&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.app-auth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2rem&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.app-auth&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.form-item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.25rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.app-auth&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.app-auth&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;97%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;.25rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.app-auth&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.form-actions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, in &lt;code class=&quot;highlighter-rouge&quot;&gt;app-profile.css&lt;/code&gt; just some simple styles to bold the label of each item.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.app-profile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.app-profile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now when you run the app, you will see a nicely styled application, ready for the web!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/add-auth-to-stencil/StencilAppLoginPage-2790ae37ee773e9a4478da7f266be8908753c6f685a81c3de2618ae76b47d30c.png&quot; alt=&quot;Stencil App Login Page&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;learn-more&quot;&gt;Learn More&lt;/h2&gt;

&lt;p&gt;To learn more about PWAs, check out Matt Raible’s &lt;a href=&quot;/blog/2017/07/20/the-ultimate-guide-to-progressive-web-applications&quot;&gt;ultimate guide to PWAs&lt;/a&gt; on the Okta developer blog.&lt;/p&gt;

&lt;p&gt;If you want to know more about Ionic apps, check out Matt’s blog post about &lt;a href=&quot;/blog/2017/08/22/build-an-ionic-app-with-user-authentication&quot;&gt;building Ionic apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can learn about building a basic CRUD app with VueJS from &lt;a href=&quot;/blog/2018/02/15/build-crud-app-vuejs-node&quot;&gt;Brandon Parise’s post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, right here you can see &lt;a href=&quot;/blog/2018/02/06/build-user-registration-with-node-react-and-okta&quot;&gt;how to set up user registration with Node and React&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;As always, if you have any questions you can comment below or  hit me up on Twitter &lt;a href=&quot;https://twitter.com/leebrandt&quot;&gt;@leebrandt&lt;/a&gt; and don’t forget to follow &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;@OktaDev&lt;/a&gt; for great content from our communities + all the news about Okta’s developer platform!&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Apr 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/04/16/add-auth-to-your-pwa-with-okta-and-stencil</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/04/16/add-auth-to-your-pwa-with-okta-and-stencil</guid>
      </item>
    
      <item>
        <title>How to Expand Your UX to a New Audience</title>
        <description>&lt;p&gt;As your business grows, you’ll probably reach a point where you need to grow your audience as well. Not just acquire more customers in your target segment, but expand to more segments and new types of customers. How do you adapt your product to your new audience? How do you avoid a “least common denominator” solution that isn’t great for anyone?&lt;/p&gt;

&lt;p&gt;At Okta, we faced these questions when &lt;a href=&quot;https://www.okta.com/blog/2017/03/stormpath-welcome-to-Okta/&quot;&gt;the Stormpath team joined&lt;/a&gt; the company last year. The Okta Identity Cloud is a complex enterprise platform that was designed for IT administrators who manage employee identity. As a product designer who joined Okta from Stormpath, I faced a big challenge. How could we ensure a great experience for an additional audience: developers building customer identity into their apps?&lt;/p&gt;

&lt;p&gt;I had previous experience pivoting to different audiences at other startups, where we kept the core product while replacing who it was for. But at Okta, this wasn’t a pivot: we needed to provide great experiences for multiple audiences with very different perspectives and use cases. And we needed to solve this as new hires on a team going through big changes.&lt;/p&gt;

&lt;h2 id=&quot;set-expectations-within-your-design-team&quot;&gt;Set Expectations Within Your Design Team&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Get buy-in from your team, and support from management.&lt;/strong&gt; This is a big project.&lt;/p&gt;

&lt;p&gt;While Okta’s executives had clearly made this a priority, I was worried that individual team members might see us as outsiders or resist doing things differently. Thankfully, everyone was open to new ideas and focused on delivering the best experience for our users.&lt;/p&gt;

&lt;p&gt;The designer working on developer experience before me, Shawn, gave a great handoff and encouraged me to find my own paths.&lt;/p&gt;

&lt;div style=&quot;max-width: 560px; margin: 0 auto&quot;&gt;
&lt;em&gt;“In design, there are usually multiple ways to tackle a problem, and it can constrain the new person's creativity and problem solving if they need to run with the decisions made before them. I think our best work, and ultimately the best solution for our users, comes out when designers have the freedom to explore and try many solutions.” &amp;mdash;Shawn Gupta, Product Design Architect at Okta&lt;/em&gt;
&lt;/div&gt;

&lt;p&gt;With an open road ahead of you, adding a new audience can feel a lot like starting over. You have to &lt;a href=&quot;https://www.invisionapp.com/blog/how-do-you-decide-what-to-build/&quot;&gt;figure out what to build&lt;/a&gt;: what does your audience need?&lt;/p&gt;

&lt;p&gt;But it’s different than doing it from scratch. &lt;strong&gt;Don’t throw out the good stuff.&lt;/strong&gt; Your team learned a lot building for your existing audience, and you had good reasons behind what was designed before. Be prepared to investigate which of those reasons are also relevant to the new audience. If nothing you’ve done still makes sense, do you have the right audience?&lt;/p&gt;

&lt;h2 id=&quot;understand-your-audience&quot;&gt;Understand Your Audience&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Research, research, research.&lt;/strong&gt; Application developers were a different audience for Okta, so our design team had already started user interviews and usability testing before I arrived. The team that joined from Stormpath had a lot of institutional knowledge, but it wasn’t well-documented.&lt;/p&gt;

&lt;p&gt;One of my first activities was to codify and consolidate everything we knew about our audience into our team wiki. Segments, personas, use cases, success criteria, peer companies – it’s all in one place for anyone in the company to reference.  I maintain this documentation today as a living document and guiding star.&lt;/p&gt;

&lt;h2 id=&quot;analyze-what-exists-today&quot;&gt;Analyze What Exists Today&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Survey your current landscape.&lt;/strong&gt; What’s the experience currently like?&lt;/p&gt;

&lt;p&gt;We did an inventory of all current features, and documented all the touchpoints where developers would interact with Okta. This is more than just UIs – for us it includes email campaigns, technical documentation, even how people sign up and pay.&lt;/p&gt;

&lt;p&gt;What features are missing? What needs to change for your new audience? How is their mental model different?&lt;/p&gt;

&lt;p&gt;Crucially, &lt;strong&gt;what can be the same for both audiences?&lt;/strong&gt; If it ain’t broke, don’t fix it. When flagging a problem for our new audience, we also evaluated if our existing audience would benefit from improvements in that area.&lt;/p&gt;

&lt;h2 id=&quot;explore-and-execute&quot;&gt;Explore and Execute&lt;/h2&gt;

&lt;p&gt;Now you’ve identified problems you need to solve. It might be a lot, but take them one at a time. &lt;strong&gt;What are different ways you could solve these challenges?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A big challenge for us was to decide on an overall architecture. Could we evolve a single experience to work for both audiences? Or would we need to develop completely separate products optimized for each audience? There was no clear answer, but a lot of tradeoffs.&lt;/p&gt;

&lt;p&gt;From a user perspective, we ultimately decided to fork into two separate products. IT customers continue use our existing admin UI, while developers sign in to a &lt;a href=&quot;/blog/2017/09/25/all-new-developer-console&quot;&gt;new developer console&lt;/a&gt;. The flows, information architecture, and branding are designed to serve each audience’s specific needs. But under the hood, both products are in a single codebase and share many components and views.&lt;/p&gt;

&lt;p&gt;With a core architecture decided, it’s time to go to work. While special concerns will keep coming up, it’s mostly your normal design process. &lt;strong&gt;Make sure to stay agile&lt;/strong&gt;, and not get stalled in the search for something perfect. We needed to move very quickly, so our goal was to ideate and converge with a bias toward velocity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/how-to-expand-your-ux-to-a-new-audience/expand-ux-dashboard-dbbc9a50eac9dc6bb3dec9b2744684e23e28e600dd854312033c52757d33d7b0.png&quot; alt=&quot;Developer Dashboard Wireframes&quot; width=&quot;560&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;center&gt;&lt;small&gt;&lt;a href=&quot;https://dribbble.com/shots/3805509-Okta-Developer-Dashboard-Exploration&quot;&gt;Some of our exploration&lt;/a&gt; for a new developer dashboard.&lt;/small&gt;&lt;/center&gt;

&lt;h2 id=&quot;validate-your-new-ux&quot;&gt;Validate Your New UX&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Don’t forget to keep researching.&lt;/strong&gt; Are the decisions you’re making actually going to work?&lt;/p&gt;

&lt;p&gt;Even though we were moving fast, we made sure to test our hypotheses. Through moderated usability tests with an Invision prototype, we got real feedback from potential customers before we shipped. We learned some things were really successful, and other things weren’t.&lt;/p&gt;

&lt;p&gt;Based on what we learned, we made a number of changes before our first release. Other problems needed more time to dig in deeper, so we documented additional issues to improve upon later.&lt;/p&gt;

&lt;h2 id=&quot;ship-it&quot;&gt;Ship It!&lt;/h2&gt;

&lt;p&gt;To keep the feedback cycle going, ship as soon as you can. Maybe that’s a small beta, or maybe it’s a big release. In our case, we were privileged to have a major conference demo.&lt;/p&gt;

&lt;div style=&quot;max-width: 560px; margin: 0 auto&quot;&gt;
&lt;p&gt;&lt;em&gt;“I wasn’t expecting applause just for showing the developer dashboard, but people were excited. I knew we were on the right track.” &amp;mdash;Nate Barbettini, Product Manager at Okta&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;max-width: 560px; margin: 0 auto&quot;&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/53jnHhfS00o?start=4170&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Celebrate!&lt;/strong&gt; It wasn’t easy getting to this point, so make sure to enjoy it. Even if you start hearing criticisms and shortcomings from your new audience, that’s a huge accomplishment – take all the feedback and start addressing it.&lt;/p&gt;

&lt;h2 id=&quot;reflect-and-iterate&quot;&gt;Reflect and Iterate&lt;/h2&gt;

&lt;p&gt;Once your MVP is out the door, now what? &lt;strong&gt;Look at your past decisions, and think about how to carry them forward.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How will you maintain your products? Who is responsible for designing for each audience? How will you stay in sync?&lt;/p&gt;

&lt;p&gt;Because we decided to fork, we now have two overlapping products. This is a win for our users, but adds some overhead for us. Okta’s design team uses &lt;a href=&quot;https://www.invisionapp.com/blog/ux-sprint-planning-okta/&quot;&gt;sprint planning&lt;/a&gt; to cross-pollinate ideas and share knowledge about upcoming projects.&lt;/p&gt;

&lt;p&gt;How is your product working for your new audience? What are the high-prio issues to tackle next? As your knowledge and constraints change, how should the product evolve?&lt;/p&gt;

&lt;p&gt;These are big questions, and you’ll never be finished with them.&lt;/p&gt;

&lt;p&gt;At Okta, we’ve got a &lt;a href=&quot;https://youtu.be/2vao69fQufo&quot;&gt;big vision and roadmap for developer experience&lt;/a&gt;. As we make improvements for each type of user, we’ll loop through this process and see which changes can be shared to benefit others. Now that we’re serving multiple audiences, we’re focused on making all of them successful at every step forward. Keep an eye out for more updates by following our team on Twitter &lt;a href=&quot;https://twitter.com/OktaDev&quot;&gt;@oktadev&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Apr 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/04/12/how-to-expand-your-ux-to-a-new-audience</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/04/12/how-to-expand-your-ux-to-a-new-audience</guid>
      </item>
    
      <item>
        <title>What is the OAuth 2.0 Authorization Code Grant Type?</title>
        <description>&lt;p&gt;The Authorization Code Grant Type is probably the most common of the OAuth 2.0 grant types that you’ll encounter. It is used by both web apps and native apps to get an access token after a user authorizes an app.&lt;/p&gt;

&lt;p&gt;This post is the first part of a series where we explore frequently used OAuth 2.0 grant types. If you want to back up a bit and learn more about OAuth 2.0 before we dive in, check out &lt;a href=&quot;/blog/2017/06/21/what-the-heck-is-oauth&quot;&gt;What the Heck is OAuth?&lt;/a&gt;, also on the Okta developer blog.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-oauth-20-grant-type&quot;&gt;What is an OAuth 2.0 Grant Type?&lt;/h2&gt;

&lt;p&gt;In OAuth 2.0, the term “grant type” refers to the way an application gets an access token. OAuth 2.0 defines several grant types, including the authorization code flow. OAuth 2.0 extensions can also define new grant types.&lt;/p&gt;

&lt;p&gt;Each grant type is optimized for a particular use case, whether that’s a web app, a native app, a device without the ability to launch a web browser, or server-to-server applications.&lt;/p&gt;

&lt;h2 id=&quot;the-authorization-code-flow&quot;&gt;The Authorization Code Flow&lt;/h2&gt;

&lt;p&gt;The Authorization Code grant type is used by web and mobile apps. It differs from most of the other grant types by first requiring the app launch a browser to begin the flow. At a high level, the flow has the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The application opens a browser to send the user to the OAuth server&lt;/li&gt;
  &lt;li&gt;The user sees the authorization prompt and approves the app’s request&lt;/li&gt;
  &lt;li&gt;The user is redirected back to the application with an authorization code in the query string&lt;/li&gt;
  &lt;li&gt;The application exchanges the authorization code for an access token&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;get-the-users-permission&quot;&gt;Get the User’s Permission&lt;/h3&gt;

&lt;p&gt;OAuth is all about enabling users to grant limited access to applications. The application first needs to decide which permissions it is requesting, then send the user to a browser to get their permission. To begin the authorization flow, the application constructs a URL like the following and opens a browser to that URL.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://authorization-server.com/auth
 ?response_type=code
 &amp;amp;client_id=29352915982374239857
 &amp;amp;redirect_uri=https%3A%2F%2Fexample-app.com%2Fcallback
 &amp;amp;scope=create+delete
 &amp;amp;state=xcoiv98y2kd22vusuye3kch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s each query parameter explained:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;response_type=code&lt;/code&gt; - This tells the authorization server that the application is initiating the authorization code flow.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt; - The public identifier for the application, obtained when the developer first registered the application.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; - Tells the authorization server where to send the user back to after they approve the request.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; - One or more space-separated strings indicating which permissions the application is requesting. The specific OAuth API you’re using will define the scopes that it supports.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; - The application generates a random string and includes it in the request. It should then check that the same value is returned after the user authorizes the app. This is used to prevent &lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29&quot;&gt;CSRF attacks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the user visits this URL, the authorization server will present them with a prompt asking if they would like to authorize this application’s request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/oauth-authorization-code-grant-type/oauth-prompt-6489c6516fda5e0deea637d96f8398683fea6ade6054ee779e306e0b8ac5dcb8.png&quot; alt=&quot;OAuth Prompt&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;redirect-back-to-the-application&quot;&gt;Redirect Back to the Application&lt;/h3&gt;

&lt;p&gt;If the user approves the request, the authorization server will redirect the browser back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; specified by the application, adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; to the query string.&lt;/p&gt;

&lt;p&gt;For example, the user will be redirected back to a URL such as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://example-app.com/redirect
 ?code=g0ZGZmNjVmOWIjNTk2NTk4ZTYyZGI3
 &amp;amp;state=xcoiv98y2kd22vusuye3kch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; value will be the same value that the application initially set in the request. The application is expected to check that the state in the redirect matches the state it originally set. This protects against CSRF and other related attacks.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; is the authorization code generated by the authorization server. This code is relatively short-lived, typically lasting between 1 to 10 minutes depending on the OAuth service.&lt;/p&gt;

&lt;h3 id=&quot;exchange-the-authorization-code-for-an-access-token&quot;&gt;Exchange the Authorization Code for an Access Token&lt;/h3&gt;

&lt;p&gt;We’re about ready to wrap up the flow. Now that the application has the authorization code, it can use that to get an access token.&lt;/p&gt;

&lt;p&gt;The application makes a POST request to the service’s token endpoint with the following parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grant_type=authorization_code&lt;/code&gt; - This tells the token endpoint that the application is using the Authorization Code grant type.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; - The application includes the authorization code it was given in the redirect.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; - The same redirect URI that was used when requesting the code. Some APIs don’t require this parameter, so you’ll need to double check the documentation of the particular API you’re accessing.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt; - The application’s client ID.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt; - The application’s client secret. This ensures that the request to get the access token is made only from the application, and not from a potential attacker that may have intercepted the authorization code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The token endpoint will verify all the parameters in the request, ensuring the code hasn’t expired and that the client ID and secret match. If everything checks out, it will generate an access token and return it in the response!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
  &quot;access_token&quot;:&quot;MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3&quot;,
  &quot;token_type&quot;:&quot;bearer&quot;,
  &quot;expires_in&quot;:3600,
  &quot;refresh_token&quot;:&quot;IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk&quot;,
  &quot;scope&quot;:&quot;create delete&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Authorization Code flow is complete! The application now has an access token it can use when making API requests.&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-the-authorization-code-flow&quot;&gt;When to use the Authorization Code Flow&lt;/h2&gt;

&lt;p&gt;The Authorization Code flow is best used in web and mobile apps. Since the Authorization Code grant has the extra step of exchanging the authorization code for the access token, it provides an additional layer of security not present in the Implicit grant type.&lt;/p&gt;

&lt;p&gt;If you’re using the Authorization Code flow in a mobile app, or any other type of application that can’t store a client secret, then you should also use the &lt;a href=&quot;https://www.oauth.com/oauth2-servers/pkce/&quot;&gt;PKCE extension&lt;/a&gt;, which provides protections against other attacks where the authorization code may be intercepted.&lt;/p&gt;

&lt;p&gt;The code exchange step ensures that an attacker isn’t able to intercept the access token, since the access token is always sent via a secure backchannel between the application and the OAuth server.&lt;/p&gt;

&lt;h2 id=&quot;learn-more-about-oauth-and-okta&quot;&gt;Learn More About OAuth and Okta&lt;/h2&gt;

&lt;p&gt;You can learn more about OAuth 2.0 on &lt;a href=&quot;https://www.oauth.com/&quot;&gt;OAuth.com&lt;/a&gt;, or check out any of these resources to get started building!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/03/21/spring-boot-oauth&quot;&gt;Get Started with Spring Boot, OAuth 2.0, and Okta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2018/03/23/token-authentication-aspnetcore-complete-guide&quot;&gt;Token Authentication in ASP.NET Core 2.0 - A Complete Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/10/27/secure-spa-spring-boot-oauth&quot;&gt;Secure your SPA with Spring Boot and OAuth&lt;/a&gt;
Or hit up &lt;a href=&quot;/docs/api/resources/oidc&quot;&gt;Okta’s OIDC/OAuth 2.0 API&lt;/a&gt; for specific information on how we support OAuth. And as always, follow us on Twitter &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;@oktadev&lt;/a&gt; for more great content.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 10 Apr 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/04/10/oauth-authorization-code-grant-type</guid>
      </item>
    
      <item>
        <title>Secure Server-to-Server Communication with Spring Boot and OAuth 2.0</title>
        <description>&lt;p&gt;Most OAuth 2.0 guides are focused around the context of a user, i.e., login to an application using Google, Github, Okta, etc., then do something on behalf of that user. While useful, these guides ignore server-to-server communication where there is no user and you only have one service connecting to another one.&lt;/p&gt;

&lt;p&gt;The OAuth 2 client credentials grant type is exclusively used for scenarios in which no user exists (CRON jobs, scheduled tasks, other data workloads, etc.). This flow is less &lt;em&gt;showy&lt;/em&gt; than other OAuth flows as there is no end user or browser to deal with, but is far easier to understand than the more complicated user-centric OAuth 2.0 grant types.&lt;/p&gt;

&lt;h2 id=&quot;oauth-20-client-credentials-grant&quot;&gt;OAuth 2.0 Client Credentials Grant&lt;/h2&gt;

&lt;p&gt;The goal of the &lt;a href=&quot;https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/&quot;&gt;client credentials&lt;/a&gt; grant is to allow two machines to communicate securely. In this grant type you have a client (think of this as your application) making API requests to another service (this is your resource server).&lt;/p&gt;

&lt;p&gt;To help illustrate why this flow is important, let’s take a step back and talk about what we did before OAuth 2.0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you’re an OAuth pro, you can skip ahead to the &lt;a href=&quot;#lets-build-an-oauth-20-client-credentials-app&quot;&gt;code examples below&lt;/a&gt; or check out the example on &lt;a href=&quot;https://github.com/oktadeveloper/spring-boot-client-credentials-example&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before OAuth 2.0 the way developers handled server-to-server authentication was with HTTP Basic Auth. Essentially what this boiled down to was that a developer would send over a server’s unique username and password (often referred to as an ID and secret) on each request. The API service would then validate this username and password on every request by connecting to a user store (database, LDAP, etc.) in order to validate the credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/client-creds-with-spring-boot/password-sequence-425e0b5f98c58bdf5b977262eaa422c275c63ec3b2d4c4c670fd866d90c0f69b.png&quot; alt=&quot;Password sequence diagram&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This approach has a few drawbacks and exposure points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each application in the diagram above handles the username and password&lt;/li&gt;
  &lt;li&gt;A second username and password might be needed to connect to user store&lt;/li&gt;
  &lt;li&gt;The same username and password is used for each request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are various ways to help mitigate these risks, but that’s out of scope in this post.&lt;/p&gt;

&lt;p&gt;The OAuth 2.0 client credentials grant was created to help solve for the problems that HTTP Basic Auth had. While the client still uses a username and password (called the &lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;client_secret&lt;/code&gt;), instead of sending them directly to the API service on each request they are instead exchanged for a token via an &lt;a href=&quot;https://tools.ietf.org/html/rfc6749#section-1.1&quot;&gt;authorization server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/client-creds-with-spring-boot/client-creds-7fee4525b7b3e50e56ab635711468599b17126e8a8393986c572fffc2c4883b3.png&quot; alt=&quot;Client credentials sequence diagram&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The authorization server returns a temporary access token (which is used until it expires). The client then uses this access token when communicating with the resource server which means that your client’s most sensitive data (the id and secret) are only shared over the network once every expiration period, dramatically reducing the likelihood of compromise. Once the resource server receives the incoming request with the access token it will then validate the token with by talking to the authorization server.&lt;/p&gt;

&lt;p&gt;I’ll talk about a couple of ways to reduce the number of network calls further at the end of this post, but first, onto an example!&lt;/p&gt;

&lt;h2 id=&quot;lets-build-an-oauth-20-client-credentials-app&quot;&gt;Let’s Build an OAuth 2.0 Client Credentials App!&lt;/h2&gt;

&lt;p&gt;Enough talk, let’s do something! I’m going to show you  &lt;em&gt;how&lt;/em&gt; to implement the client credentials grant type with Spring using two applications: a &lt;code class=&quot;highlighter-rouge&quot;&gt;client&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt;.  The server will have a single endpoint which returns a “message of the day.”  The client will be a simple command line application; you could easily replace this with a backend web application, CRON job, or any other backend script.&lt;/p&gt;

&lt;h3 id=&quot;set-up-your-authorization-server&quot;&gt;Set Up Your Authorization Server&lt;/h3&gt;

&lt;p&gt;To keep things simple, you’ll use Okta to create an OAuth 2.0 authorization server. This will handle all of the client credentials grant stuff mentioned above. Do you need to use Okta? Not at all! You can use any OAuth 2.0 compatible server you want — but because our service is free and simple to use, it speeds this process up.&lt;/p&gt;

&lt;p&gt;If you don’t already have a free developer account, head over to &lt;a href=&quot;/&quot;&gt;developer.okta.com&lt;/a&gt; and click sign up. When that’s done you’ll have two pieces of information, your Okta base URL which looks something like: &lt;code class=&quot;highlighter-rouge&quot;&gt;dev-123456.oktapreview.com&lt;/code&gt;, and an email with instructions on how to activate your account.&lt;/p&gt;

&lt;p&gt;After activating your account, while you are still in the Okta Developer Console, you then need to create an application and a custom OAuth scope. The application will give you a client ID and secret, while the custom scope will restrict your access token to this example.&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Applications&lt;/strong&gt; menu item, then &lt;strong&gt;Add Application&lt;/strong&gt;, then &lt;strong&gt;Service&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Next&lt;/strong&gt;. Change the name to whatever you want (I’m going to use “My MOD App”), then click &lt;strong&gt;Done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You will need the &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client secret&lt;/strong&gt; values for the next steps.&lt;/p&gt;

&lt;p&gt;Next, create a &lt;a href=&quot;https://www.oauth.com/oauth2-servers/scope/defining-scopes/&quot;&gt;custom scope&lt;/a&gt; for your application.&lt;/p&gt;

&lt;p&gt;From the menu bar select &lt;strong&gt;API&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Authorization Servers&lt;/strong&gt;. Remember the &lt;strong&gt;Issuer URI&lt;/strong&gt; value; you will need this for the next steps. Edit the authorization server by clicking on the edit pencil, then click &lt;strong&gt;Scopes&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Add Scope&lt;/strong&gt;.  Fill out the name field with &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_mod&lt;/code&gt; and press &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/client-creds-with-spring-boot/custom-scope-eabddbbebd0c5229678116143bbdd49318cca8e261d50f6070b011055022c281.png&quot; alt=&quot;Create a custom scope in Okta Developer Console&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Onto the fun stuff!&lt;/p&gt;
&lt;h3 id=&quot;create-a-resource-server&quot;&gt;Create a Resource Server&lt;/h3&gt;

&lt;p&gt;This resource server (aka: API service) is going to be overly simple and consist of a single &lt;code class=&quot;highlighter-rouge&quot;&gt;/mod&lt;/code&gt; endpoint. Create a new project using the &lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializer&lt;/a&gt; on the command line:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://start.spring.io/starter.tgz  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;creds-example-server &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;security,web &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;java &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;maven-project &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;baseDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;creds-example-server &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
| &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzvf&lt;/span&gt; -

&lt;span class=&quot;c&quot;&gt;# change into the new directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;creds-example-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will also need to manually add one more dependency to your &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security.oauth.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-oauth2-autoconfigure&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0.0.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I also renamed the &lt;code class=&quot;highlighter-rouge&quot;&gt;DemoApplication&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerApplication&lt;/code&gt; because we are going to create another application shortly.&lt;/p&gt;

&lt;p&gt;Update &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerApplication&lt;/code&gt; to include the &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableResourceServer&lt;/code&gt; annotation and add a simple REST controller:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@EnableResourceServer&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServerApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServerApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Allows for @PreAuthorize annotation processing.
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@EnableGlobalMethodSecurity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prePostEnabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GlobalSecurityConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GlobalMethodSecurityConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MethodSecurityExpressionHandler&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createExpressionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OAuth2MethodSecurityExpressionHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MessageOfTheDayController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@GetMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/mod&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#oauth2.hasScope('custom_mod')&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getMessageOfTheDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The message of the day is boring for user: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it’s time to configure the application! I renamed my &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; file to &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; and updated it to include:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;client-id-from-above&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;clientSecret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;client-secret-from-above&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tokenInfoUri&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;issuer-uri-from-above&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/v1/introspect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it: a few lines of code and a couple lines of config! Spring Boot will automatically handle the validation of the access tokens, all you need to worry about is your code.&lt;/p&gt;

&lt;p&gt;Start it up and leave it running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./mvn spring-boot:run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can try to access &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/mod&lt;/code&gt; if you want, it will respond with a, &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP 401 UNAUTHORIZED&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;create-the-oauth-20-client&quot;&gt;Create the OAuth 2.0 Client&lt;/h3&gt;

&lt;p&gt;Next, you’re going to create a simple command line client (you could easily duplicate this logic in any type of application).&lt;/p&gt;

&lt;p&gt;Open up a new terminal window and create a second application with the Spring Initializer:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://start.spring.io/starter.tgz  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;creds-example-client &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;security &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;java &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;maven-project &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;baseDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;creds-example-client &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
| &lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzvf&lt;/span&gt; -

&lt;span class=&quot;c&quot;&gt;# change into the new directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;creds-example-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Same as before, add in the Spring OAuth 2.0 library as a dependency in your &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security.oauth.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-oauth2-autoconfigure&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.0.0.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time I’ll start by defining the configuration (again I renamed &lt;code class=&quot;highlighter-rouge&quot;&gt;application.properties&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:8080&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;oauth2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;grantType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;client_credentials&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;client-id-from-above&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;clientSecret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;client-secret-from-above&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;accessTokenUri&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;issuer-uri-from-above&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/v1/token&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;custom_mod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve namespaced the configuration under &lt;code class=&quot;highlighter-rouge&quot;&gt;example&lt;/code&gt; as you could be connecting to multiple servers.&lt;/p&gt;

&lt;p&gt;I configured a few properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;baseUrl&lt;/code&gt; is the base URL of our example server&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grantType&lt;/code&gt; defines the grant type for the connection&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;clientId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;clientSecret&lt;/code&gt; are the same as above&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;accessTokenUri&lt;/code&gt; defines the URI used to get an access token&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; is the custom scope we created above&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last up is our &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientApplication&lt;/code&gt; (renamed from &lt;code class=&quot;highlighter-rouge&quot;&gt;DemoApplication&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClientApplication&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandLineRunner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#{ @environment['example.baseUrl'] }&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverBaseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ConfigurationProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;example.oauth2.client&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClientCredentialsResourceDetails&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;oAuthDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ClientCredentialsResourceDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RestTemplate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OAuth2RestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oAuthDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MOD: {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getForObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serverBaseUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/mod&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are a few things I want to touch on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CommandLineRunner&lt;/code&gt; interface adds a &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; method, which is called automatically after initialization, the application exits after leaving this method&lt;/li&gt;
  &lt;li&gt;I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientCredentialsResourceDetails&lt;/code&gt; bean which is bound to my configuration properties: &lt;code class=&quot;highlighter-rouge&quot;&gt;example.oauth2.client&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;I use an &lt;code class=&quot;highlighter-rouge&quot;&gt;OAuth2RestTemplate&lt;/code&gt; in place of a standard &lt;code class=&quot;highlighter-rouge&quot;&gt;RestTemplate&lt;/code&gt; this automatically manages all of the OAuth 2.0 access token exchange and sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;Authentication: Bearer&lt;/code&gt; header value.  Basically, it handles all of the OAuth detail so you don’t need to worry about any of them!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the application with &lt;code class=&quot;highlighter-rouge&quot;&gt;./mvnw spring-boot:run&lt;/code&gt; and you should see console output similar to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;2018-03-20 12:56:10.058  INFO 15833 --- [main] c.e.c.ClientApplication: MOD: The message of the day is boring for user: 0oabcd12yz2EpHuis75s3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client has successfully communicated with the server! Not bad, right? In just a few lines of code you were able to get an OAuth 2.0 authorization server setup and configured as well as create two Spring apps (one client and one server) which can now communicate securely using the OAuth 2.0 client credentials grant type!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; if you see a &lt;code class=&quot;highlighter-rouge&quot;&gt;401&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;500&lt;/code&gt; exception double check that your &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; config files contain the correct information.&lt;/p&gt;

&lt;h2 id=&quot;extra-credit-reduce-the-number-of-calls-to-the-authorization-server&quot;&gt;Extra Credit: Reduce the Number of Calls to the Authorization Server&lt;/h2&gt;

&lt;p&gt;The second sequence diagram above seems more complicated than the first, even when factoring in the reuse of an access token. Access tokens are opaque, there is no spec behind them, and the format is left to the implementation of the authorization server.&lt;/p&gt;

&lt;p&gt;At Okta we use signed JWTs which means you can &lt;a href=&quot;/authentication-guide/tokens/validating-access-tokens&quot;&gt;validate them locally&lt;/a&gt; instead of making an additional request from the API service to the authorization server on each request.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/client-creds-with-spring-boot/client-creds-jwt-90615dab46fe5a23d5bca2a29ec42e518683860826b70840fa2a6cea62108440.png&quot; alt=&quot;Client credentials with JWT sequence&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have helper libraries in a &lt;a href=&quot;https://github.com/okta?q=okta-jwt-&quot;&gt;few different languages&lt;/a&gt; and a &lt;a href=&quot;https://github.com/okta/okta-spring-boot&quot;&gt;Spring Boot starter&lt;/a&gt; that will handle the local validation for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; at the time of this writing &lt;code class=&quot;highlighter-rouge&quot;&gt;okta-spring-boot&lt;/code&gt; only works with Spring Boot 1.5.x, see an example on &lt;a href=&quot;https://github.com/okta/samples-java-spring/tree/master/resource-server&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;learn-more-about-oauth-20-and-okta&quot;&gt;Learn More About OAuth 2.0 and Okta&lt;/h2&gt;

&lt;p&gt;In this post, I’ve explained the OAuth 2.0 client credentials grant type and created small demo applications that exercised this flow (with very little code, thanks to Spring Boot!). If you have questions, leave them below or ping me (&lt;a href=&quot;https://twitter.com/briandemers&quot;&gt;@briandemers&lt;/a&gt;) or &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;@OktaDev&lt;/a&gt; on Twitter.&lt;/p&gt;

&lt;p&gt;For more info on OAuth 2.0 and Okta check out these resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/06/21/what-the-heck-is-oauth&quot;&gt;What the Heck is OAuth?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oauth.com/&quot;&gt;OAuth.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/10/27/secure-spa-spring-boot-oauth&quot;&gt;Secure your SPA with Spring Boot and OAuth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 02 Apr 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/04/02/client-creds-with-spring-boot</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/04/02/client-creds-with-spring-boot</guid>
      </item>
    
      <item>
        <title>Everything You Need to Know About the Twelve-Factor App</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/twelve-factor-6a69d14e6514b8402ab8171cc8b830b37c2744da4b61ad79ec3c1f3d5f565f92.png&quot; alt=&quot;the twelve-factor app&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ever heard of the &lt;a href=&quot;https://12factor.net/&quot;&gt;twelve-factor app&lt;/a&gt;? Earlier this week I was scrolling through one of my favorite websites, &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;, and stumbled across the twelve-factor app for the first time.&lt;/p&gt;

&lt;p&gt;While I didn’t have time to read the official twelve-factor website, I wanted to take some time to share my thoughts about building twelve-factor apps, why they’re important, and what you need to know about them.&lt;/p&gt;

&lt;p&gt;Writing secure web applications can be really difficult!&lt;/p&gt;

&lt;p&gt;My hope is that this guide shows you how you can make any web app far more secure by following the principles laid out in the twelve-factor app. Thanks &lt;a href=&quot;https://twitter.com/hirodusk&quot;&gt;@hirodusk&lt;/a&gt; for creating the twelve-factor app and teaching new developers like me more about web security! &amp;lt;3&lt;/p&gt;

&lt;h2 id=&quot;why-you-need-twelve-factor&quot;&gt;Why You Need Twelve Factor&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/stick-figure-teacher-aece0264cd87116960efdb1acddaa6e24ac013e42ecb80281c91a1beb4d5c916.png&quot; alt=&quot;stick figure teacher&quot; width=&quot;200&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The idea behind the &lt;a href=&quot;https://12factor.net/&quot;&gt;twelve-factor app&lt;/a&gt; app is simple: logging users into websites and mobile apps is insecure. No matter how much time you spend securing your websites and mobile apps, it still isn’t enough.&lt;/p&gt;

&lt;p&gt;Think I’m exaggerating? Just take a look at some of the largest &lt;a href=&quot;http://lmgtfy.com/?q=famous+website+hacks&quot;&gt;website hacks&lt;/a&gt; over the last few years. Tons of massive companies with large engineering teams and amazing security prowess have all become the victims of relatively simple exploits.&lt;/p&gt;

&lt;p&gt;The twelve-factor app is an excellent security pattern designed to dramatically improve the security of any website or mobile app that users log into, making them almost completely impenetrable.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-current-login-technology&quot;&gt;The Problem with Current Login Technology&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/rage-face-f131e87b74518eb6bcc9cc1cff5e1f3240362c33cef54905a5ae71163d05c012.png&quot; alt=&quot;rage face&quot; width=&quot;200&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Time for a quick history lesson.&lt;/p&gt;

&lt;p&gt;Back in the day, when programmers would build a login page for a website or mobile app, they’d typically craft something simple that accepted a username &lt;em&gt;or&lt;/em&gt; email address and password.&lt;/p&gt;

&lt;p&gt;When the user would enter this information correctly, they’d be immediately logged into the website or app.&lt;/p&gt;

&lt;p&gt;While this was simple and straightforward, it ended up being a huge security issue as attackers could simply guess a user’s username/password over and over again until they got lucky and were able to access their account.&lt;/p&gt;

&lt;p&gt;Because modern computers are so fast (&lt;em&gt;thanks a lot, &lt;a href=&quot;https://en.wikipedia.org/wiki/Moore%27s_law&quot;&gt;Gordon Moore&lt;/a&gt;!&lt;/em&gt;) attackers can now guess many username/password combinations quickly, meaning that a skilled attacker can compromise your account even if you have a long, random password. Boo.&lt;/p&gt;

&lt;p&gt;Once developers began realizing that username/password login was insecure, they started to experiment with multiple factors.&lt;/p&gt;

&lt;p&gt;The way two-factor authentication worked was a little more complicated, but far more secure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A user would visit a login page and enter their username/password just like before&lt;/li&gt;
  &lt;li&gt;If the username/password entered were valid, then the user would receive an SMS message containing a number&lt;/li&gt;
  &lt;li&gt;The user would then be required to enter that number into the website to &lt;em&gt;prove&lt;/em&gt; that they had access to their cell phone, and that the user was therefore who they claimed to be&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This was a great advancement for web security at the time because even if a hacker was able to steal your username and password, they’d also have to steal your phone to be able to actually log in.&lt;/p&gt;

&lt;p&gt;But… Not long after two-factor became a popular method of authentication, problems appeared. Hackers found ways to &lt;a href=&quot;https://www.theverge.com/2017/9/18/16328172/sms-two-factor-authentication-hack-password-bitcoin&quot;&gt;compromise SMS&lt;/a&gt; as a protocol and gain access to text messaging capabilities without ever stealing your phone.&lt;/p&gt;

&lt;p&gt;And with that the entire security industry was back to square one.&lt;/p&gt;

&lt;p&gt;As SMS codes faded into a distant memory, multi-factor authentication was becoming popular. Multi-factor authentication is a pattern that allows a user to register different &lt;em&gt;factors&lt;/em&gt;, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SMS&lt;/li&gt;
  &lt;li&gt;Google Authenticator&lt;/li&gt;
  &lt;li&gt;Authy&lt;/li&gt;
  &lt;li&gt;Okta Verify&lt;/li&gt;
  &lt;li&gt;Yubikey&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way, a user can choose which type of factor to use after entering their username and password on a website. By allowing users to use different types of factors other than SMS, a hacker’s job becomes much more difficult.&lt;/p&gt;

&lt;p&gt;If a hacker wanted to break through multi-factor authentication, they’d need to learn to exploit whatever factors a user had configured. And that is hard work.&lt;/p&gt;

&lt;p&gt;Which brings us to today. Today, multi-factor authentication is quickly becoming a standard, but still suffers &lt;em&gt;severe&lt;/em&gt; security limitations: it’s only as secure as the amount of factors you use.&lt;/p&gt;

&lt;p&gt;While multi-factor is awesome in that it allows a user to pick and choose what type of factor they log in with (outside of their username/password), it simply doesn’t go far enough.&lt;/p&gt;

&lt;p&gt;If an attacker is able to successfully guess your username/password, they’ll also be able to see what factor you’ve configured to log in with. Let’s say you’ve configured your &lt;a href=&quot;https://github.com/&quot;&gt;Github account&lt;/a&gt;, for instance, to support Google Authenticator.&lt;/p&gt;

&lt;p&gt;All an attacker needs to do at this point is hack your Google Authenticator and then &lt;em&gt;bam&lt;/em&gt;: you’re right back to where you started — completely insecure.&lt;/p&gt;

&lt;p&gt;Which brings us to the new official security recommendation of 2018: the twelve-factor app.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-twelve-factor-app&quot;&gt;What is the Twelve-Factor App?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/confused-stick-figure-ee0818999f06b24bfbe37f6efffa62624b1b79313e795abb13bd83a741208039.jpg&quot; alt=&quot;confused stick figure&quot; width=&quot;100&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The twelve-factor app is a new best practice for building secure login systems that picks up where multi-factor left off.&lt;/p&gt;

&lt;p&gt;Instead of allowing a user to configure different factors they can choose from to log in — a twelve-factor compliant app &lt;em&gt;requires&lt;/em&gt; each user to have twelve different authentication factors and to use them &lt;em&gt;each time&lt;/em&gt; they log into a website or mobile app.&lt;/p&gt;

&lt;p&gt;Here’s an example of a twelve-factor compliant app:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A user visits a website and enters their username/password (factor 1)&lt;/li&gt;
  &lt;li&gt;The user then receives an SMS message and types in a code&lt;/li&gt;
  &lt;li&gt;The user then opens their Google Authenticator app on their phone and enters the code from there&lt;/li&gt;
  &lt;li&gt;The user then opens their Authy app on their phone and enters the code from there&lt;/li&gt;
  &lt;li&gt;The user then opens their Okta Verify app on their phone and enters the code from there&lt;/li&gt;
  &lt;li&gt;The user then uses FaceID to have their face detected&lt;/li&gt;
  &lt;li&gt;The user then presses their finger up against the fingerprint scanner on their phone and uses that to confirm their fingerprint&lt;/li&gt;
  &lt;li&gt;The user then says their “voice password” out loud when their phone prompts them (this does voice recognition)&lt;/li&gt;
  &lt;li&gt;The user then enters their preferred credit card number into the app when requested to confirm that their billing details are known&lt;/li&gt;
  &lt;li&gt;The user then enters their social security number which helps verify their identity&lt;/li&gt;
  &lt;li&gt;The user then enters their birthday&lt;/li&gt;
  &lt;li&gt;Finally, the user enters private genome data about themselves that is cross-referenced against the &lt;a href=&quot;https://api.23andme.com/&quot;&gt;23andMe API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While this process is slightly inconvenient for a user to repeat each time they log in, in provides superior protection against attackers and makes you virtually hacker-proof.&lt;/p&gt;

&lt;p&gt;Let’s say an attacker is able to get a hold of your username/password and your phone: they’d still have to compromise a TON of other things about you (your face, your fingerprint, your credit card numbers, your social, a sample of your blood, etc.) before they could ever log into your account!&lt;/p&gt;

&lt;h2 id=&quot;how-to-adopt-twelve-factor-in-your-apps&quot;&gt;How to Adopt Twelve-Factor in Your Apps&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/stick-figure-beard-4baa77a062ee214aec455fb8723dfff16d188b012b712ba17eba5d771f1f7e6b.jpg&quot; alt=&quot;stick figure beard&quot; width=&quot;150&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The twelve-factor app takes the concept of multi-factor authentication to the next level and is the minimum needed to keep mainstream websites and mobile apps secure.&lt;/p&gt;

&lt;p&gt;While it does take a little bit of extra time to build out a twelve-factor compliant app, it can certainly be done. Here are some steps I’d recommend taking immediately:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write down a list of twelve separate factors you intend to support (including username/password)&lt;/li&gt;
  &lt;li&gt;Look up API services that can easily offload some of this work:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://api.23andme.com/&quot;&gt;23andMe&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.twilio.com/&quot;&gt;Twilio&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://developer.okta.com/&quot;&gt;Okta Verify&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The next time your users log into your application, require them to connect twelve separate authentication factors to their account so that the next time they log they will be used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One side effect of implementing a twelve-factor app is that you’ll definitely receive a lot of user support calls, but in my experience, offloading that to your support team will generally be fine. Since twelve-factor apps are increasingly common, your support team is most likely already familiar with helping users configure their twelve factors, sign in, etc.&lt;/p&gt;

&lt;p&gt;With that said, I hope you enjoyed this brief breakdown of the twelve-factor app and some in-depth information about how you can use it to make your sites more secure.&lt;/p&gt;

&lt;p&gt;Please &lt;a href=&quot;https://twitter.com/rdegges&quot;&gt;tweet at me&lt;/a&gt; if you have any security questions! Now go out there and make your applications more secure!&lt;/p&gt;

&lt;h2 id=&quot;gotcha&quot;&gt;Gotcha!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/stick-figure-happy-1bd8e401a320e50b051d7a352c196f923afa43ff11471db6c0feaf9e89763f3b.gif&quot; alt=&quot;stick figure happy&quot; width=&quot;200&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations on making it this far: happy April Fools’ Day!&lt;/p&gt;

&lt;p&gt;I’m not insane (&lt;em&gt;despite what my friends and co-workers might tell you&lt;/em&gt;), and I’m also not advocating that you use &lt;em&gt;twelve-factor&lt;/em&gt; authentication for your apps.&lt;/p&gt;

&lt;h2 id=&quot;what-is-twelve-factor-really&quot;&gt;What is Twelve-Factor, Really?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/stick-figure-eyeroll-1848f3409acc55235c85986f8f9e928aa2f1ed1b3b6e095d0df90b7908fa1191.gif&quot; alt=&quot;stick figure eyeroll&quot; width=&quot;200&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://12factor.net/&quot;&gt;twelve-factor app&lt;/a&gt; is a collection of best practices for building modern web applications. It’s called twelve-factor because there are twelve separate guidelines that it recommends every developer follow to build simple and scalable applications:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use one codebase with version control to track many deploys&lt;/li&gt;
  &lt;li&gt;Explicitly declare and isolate dependencies&lt;/li&gt;
  &lt;li&gt;Store your configuration in environment variables&lt;/li&gt;
  &lt;li&gt;Treat backing services as attached resources (databases, file servers, etc.)&lt;/li&gt;
  &lt;li&gt;Strictly separate the build and run stages of your deployment pipeline&lt;/li&gt;
  &lt;li&gt;Execute your app as one or more stateless processes&lt;/li&gt;
  &lt;li&gt;Export your services via port binding&lt;/li&gt;
  &lt;li&gt;Scale out via the process model&lt;/li&gt;
  &lt;li&gt;Maximize robustness with fast startup and graceful shutdown&lt;/li&gt;
  &lt;li&gt;Keep development, staging, and production as similar as possible&lt;/li&gt;
  &lt;li&gt;Treat logs as event streams&lt;/li&gt;
  &lt;li&gt;Run admin/management tasks as one-off processes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One of my programmer heroes, &lt;a href=&quot;http://about.adamwiggins.com/&quot;&gt;Adam Wiggins&lt;/a&gt; (co-founder of one of my favorite services: &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;), is the creator of the twelve-factor app pattern.&lt;/p&gt;

&lt;p&gt;With that said, it should be obvious that the twelve-factor app has nothing to do with multi-factor authentication.&lt;/p&gt;

&lt;h2 id=&quot;why-is-twelve-factor-authentication-bad&quot;&gt;Why is Twelve-Factor Authentication Bad?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/stick-figure-thinking-9c14c3395cf8573d2ea114a886f8c3dfe07c1724845d09c9a51a0fa5096f64c1.jpg&quot; alt=&quot;stick figure thinking&quot; width=&quot;250&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While it’s true that more factors provides more security, twelve-factor authentication is bad for a few primary reasons.&lt;/p&gt;

&lt;p&gt;First of all, the more factors you require a user to enter each time they log in, the less they’ll log in. If you had to enter twelve separate proofs about yourself upon each login you’d go crazy.&lt;/p&gt;

&lt;p&gt;Second, what a lot of people don’t realize is that each factor your application supports places a really high burden on your development team.&lt;/p&gt;

&lt;p&gt;Maintaining all sorts of connectors and verification methods to do things like verify SMS codes, Google Authenticator codes, Yubikey key presses, etc. can take a ton of time and effort to build and maintain.&lt;/p&gt;

&lt;p&gt;Finally, twelve-factor authentication as I laid it out above would also create an insane burden on your support team (if you have one). Imagine the amount of customer support phone calls and emails Netflix would receive if one day they require you to go through twelve factors of authentication to login; there’d be riots in the streets of San Francisco!&lt;/p&gt;

&lt;h2 id=&quot;multi-factor-is-good-but-adaptive-multi-factor-is-better&quot;&gt;Multi-Factor is Good, but Adaptive Multi-Factor is Better&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/nerdy-stick-figure-99762115ee51de2412023fcee9e7be2e1d69dbf161a149b515b1d0d0e7783e5f.png&quot; alt=&quot;nerdy stick figure&quot; width=&quot;200&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Multi-factor authentication is awesome:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It allows your users to prove themselves with only a little bit of inconvenience.&lt;/li&gt;
  &lt;li&gt;It allows your users to add multiple “factors” to select from when logging in — this way, if you add both an SMS factor &lt;em&gt;and&lt;/em&gt; a Yubikey factor you can still log into your account even if you forget your Yubikey device..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with multi-factor authentication, however, is the same exact problem you’d have implementing twelve-factor authentication as well: it’s annoying.&lt;/p&gt;

&lt;p&gt;I’ll give you an example: when I log into my bank account, I’m &lt;em&gt;always&lt;/em&gt; prompted to enter an SMS code from my phone. It doesn’t matter if I’ve just been away from my computer for 30 minutes, I’ve always got to re-authenticate using my second factor each and every time.&lt;/p&gt;

&lt;p&gt;This gets annoying really quick.&lt;/p&gt;

&lt;p&gt;To help solve this problem, some really smart people got together and decided to coin the term “adaptive multi-factor authentication”, which refers to the strategy of only prompting users for multi-factor authentication &lt;em&gt;when needed&lt;/em&gt; (eg: being adaptive about it).&lt;/p&gt;

&lt;p&gt;For example: let’s say I log into my bank website from my house and authenticate with a second factor (like an SMS code).&lt;/p&gt;

&lt;p&gt;The website I’m visiting can remember my public IP, my browser, and some other facts about me so that the next time I log in, if these details are the same, the bank website can still trust me and not require me to enter an SMS code again.&lt;/p&gt;

&lt;p&gt;By combining modern techniques like machine learning with simple user context it is possible to relax multi-factor requirements while still retaining a high level of security and a maximum amount of usability.&lt;/p&gt;

&lt;p&gt;Once you’ve gotten used to adaptive multi-factor, there’s no going back. At Okta, our &lt;a href=&quot;https://www.okta.com/products/adaptive-multi-factor-authentication/&quot;&gt;adaptive multi-factor authentication solutions&lt;/a&gt; are incredibly popular.&lt;/p&gt;

&lt;h2 id=&quot;best-practices-for-secure-login&quot;&gt;Best Practices for Secure Login&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/twelve-factor/stick-figure-officer-a704145a1cbca7229b2c6d738fff75373480a5f8d8455d24bd337bf3a161260c.gif&quot; alt=&quot;stick figure officer&quot; width=&quot;100&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this far, I hope you had as much fun reading this as I had writing it!&lt;/p&gt;

&lt;p&gt;To sum things up, here’s what I’d recommend you do when trying to build applications that are not only secure, but also convenient:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allow users to register one or more factors when they sign up for your service (SMS, Yubikey, Google Authenticator, Okta Verify, Authy, etc.)&lt;/li&gt;
  &lt;li&gt;Try to discourage users from using insecure factors (like SMS)&lt;/li&gt;
  &lt;li&gt;Use adaptive multi-factor when possible so that your users won’t be bombarded with authentication proof requirements upon every login&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you do the above you’re getting the best of both worlds: security and convenience.&lt;/p&gt;

&lt;p&gt;That’s all for now, please &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;hit us up&lt;/a&gt; if you have any questions or leave a comment below.&lt;/p&gt;
</description>
        <pubDate>Fri, 30 Mar 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/03/30/everything-you-need-to-know-about-the-twelve-factor-app</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/03/30/everything-you-need-to-know-about-the-twelve-factor-app</guid>
      </item>
    
      <item>
        <title>Hello, Okta!</title>
        <description>&lt;p&gt;My name is Aaron Parecki, and last week I joined Okta on the Developer Advocacy team.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/welcome-aaron-okta/aaronpk-6448ba5c729697748b6c66f88a0dc868b406d97ea1cab0de9e9f015d84d29acb.jpg&quot; alt=&quot;Aaron Parecki&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been working with Okta since 2016 when we published the online version of my book, OAuth 2.0 Simplified, on oauth.com. In 2017, I worked with the team again on producing the &lt;a href=&quot;https://oauth2simplified.com/&quot;&gt;print version&lt;/a&gt;, which we released at Okta’s conference in Las Vegas last fall.&lt;/p&gt;

&lt;p&gt;In 2016, Okta was focused on the enterprise IT market, providing a much-needed single-sign-on service. However, I come from a developer-focused background, having previously founded a startup building developer tools for people making location-based apps. So in 2016, I was perfectly happy continuing to do contract work with Okta, never expecting that I would want to join the team full time.&lt;/p&gt;

&lt;p&gt;In 2017, Okta &lt;a href=&quot;https://stormpath.com/blog/stormpaths-new-path&quot;&gt;acquired Stormpath&lt;/a&gt;, a company building an authentication and user management service that focused on developer experience. Throughout the process of publishing the print book that year, I worked with several people from the once-Stormpath-now-Okta team, and got to see the amazing changes they were pushing forward within Okta. Okta’s newly broadened developer experience team has taken their talent for creating great products for developers and incorporated that into Okta’s products at their core. Seeing that transformation from one year to the next was incredible, and is what drew me to this new role.&lt;/p&gt;

&lt;h2 id=&quot;who-is-aaron&quot;&gt;Who is Aaron?&lt;/h2&gt;

&lt;p&gt;I grew up writing GW-BASIC on a computer in my parents’ attic, making little text-based games and programs that would play music. I eventually discovered the web, and started reading every book I could find at the library about how to make web pages. Starting off with HTML and what little we had of CSS at the time, eventually picking up Perl and PHP, and learning how to administer a Linux server I ran in my closet. I quickly started picking up freelance work, making web pages for local businesses and eventually building more involved web apps and databases.&lt;/p&gt;

&lt;p&gt;In 2008, I began &lt;a href=&quot;https://aaronparecki.com/gps/&quot;&gt;carrying a GPS tracker&lt;/a&gt; with me at all times to keep a personal log of everywhere I’ve been down to a 1-second interval. Due to the highly personal nature of that kind of data, that project set me down a path of wanting to bring more and more of my online data under my own control. I began co-organizing &lt;a href=&quot;https://indieweb.org&quot;&gt;IndieWebCamp&lt;/a&gt;, an annual conference where we help people use their websites to own their online data and online identities. The community has grown over the years, and we run events and meetups all over the world.&lt;/p&gt;

&lt;p&gt;I’ve also edited several specs that allow people to use their own websites as a decentralized social network. Some of these specs have been brought in and standardized under the &lt;a href=&quot;https://www.w3.org&quot;&gt;W3C&lt;/a&gt;, like &lt;a href=&quot;https://www.w3.org/TR/webmention/&quot;&gt;Webmention&lt;/a&gt; for peer-to-peer comments, &lt;a href=&quot;https://www.w3.org/TR/micropub/&quot;&gt;Micropub&lt;/a&gt; for posting to your site from other apps, and even an OAuth 2.0 extension &lt;a href=&quot;https://www.w3.org/TR/indieauth/&quot;&gt;IndieAuth&lt;/a&gt; that enables you to use your own website to sign in to apps online.&lt;/p&gt;

&lt;h2 id=&quot;looking-forward-to-the-future&quot;&gt;Looking Forward to the Future!&lt;/h2&gt;

&lt;p&gt;I’ve always enjoyed helping people understand OAuth and web identity concepts, whether that’s by writing books and blog posts, doing on-site trainings, or giving talks at conferences. I’m excited to be able to continue this at Okta!&lt;/p&gt;

&lt;p&gt;You can find me on the internet at &lt;a href=&quot;https://aaronparecki.com&quot;&gt;aaronparecki.com&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/aaronpk&quot;&gt;@aaronpk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 27 Mar 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/03/27/welcome-aaron-okta</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/03/27/welcome-aaron-okta</guid>
      </item>
    
      <item>
        <title>Token Authentication in ASP.NET Core 2.0 - A Complete Guide</title>
        <description>&lt;p&gt;Token authentication has been a popular topic for the past few years, especially as mobile and JavaScript apps have continued to gain mindshare. Widespread adoption of token-based standards like &lt;a href=&quot;/blog/2017/06/21/what-the-heck-is-oauth&quot;&gt;OAuth 2.0 and OpenID Connect&lt;/a&gt; have introduced even more developers to tokens, but the best practices aren’t always clear.&lt;/p&gt;

&lt;p&gt;I spend a lot of time in the ASP.NET Core world and have been working with the framework since the pre-1.0 days. ASP.NET Core 2.0 has great support for consuming and validating tokens, thanks to built-in JWT validation middleware. However, many people were surprised about the removal of the token generation code from ASP.NET 4. In the early days of ASP.NET Core, the full token authentication story was a confusing jumble.&lt;/p&gt;

&lt;p&gt;Now that ASP.NET Core 2.0 (soon 2.1) is stable, things have settled down. In this post, I’ll examine the best practices for both sides of the token authentication story: token validation and token generation.&lt;/p&gt;

&lt;h2 id=&quot;what-is-token-authentication&quot;&gt;What is Token Authentication?&lt;/h2&gt;
&lt;p&gt;Token authentication is the process of attaching a token (sometimes called an &lt;em&gt;access token&lt;/em&gt; or a &lt;em&gt;bearer token&lt;/em&gt;) to HTTP requests in order to authenticate them. It’s commonly used with APIs that serve mobile or SPA (JavaScript) clients.&lt;/p&gt;

&lt;p&gt;Each request that arrives at the API is inspected. If a valid token is found, the request is allowed. If no token is found, or the token is invalid, the request is rejected with a &lt;code class=&quot;highlighter-rouge&quot;&gt;401 Unauthorized&lt;/code&gt; response.&lt;/p&gt;

&lt;p&gt;Token authentication is usually used in the context of OAuth 2.0 or OpenID Connect. If you want to brush up on how those protocols work, read our &lt;a href=&quot;/blog/2017/07/25/oidc-primer-part-1&quot;&gt;primer on OpenID Connect&lt;/a&gt;, or watch my talk &lt;a href=&quot;https://www.youtube.com/watch?v=996OiexHze0&quot;&gt;OAuth and OpenID Connect in plain English&lt;/a&gt; on YouTube!&lt;/p&gt;

&lt;h2 id=&quot;validate-tokens-in-aspnet-core&quot;&gt;Validate Tokens in ASP.NET Core&lt;/h2&gt;
&lt;p&gt;Adding token authentication to your API in ASP.NET Core is easy thanks to the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearerAuthentication&lt;/code&gt; middleware included in the framework. If you’re consuming tokens created by a standard OpenID Connect server, the configuration is super easy.&lt;/p&gt;

&lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup&lt;/code&gt; class, add the middleware anywhere in your &lt;code class=&quot;highlighter-rouge&quot;&gt;ConfigureServices&lt;/code&gt; method, and configure it with the values from your authorization server:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddJwtBearer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{yourAuthorizationServerAddress}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Audience&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{yourAudience}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, in your &lt;code class=&quot;highlighter-rouge&quot;&gt;Configure&lt;/code&gt; method, add this line just above &lt;code class=&quot;highlighter-rouge&quot;&gt;UseMvc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This second step of adding &lt;code class=&quot;highlighter-rouge&quot;&gt;UseAuthentication()&lt;/code&gt; is easy to forget! I’ve done it a few times. If your authenticated calls aren’t working properly, make sure you’ve added this line in the right place (above &lt;code class=&quot;highlighter-rouge&quot;&gt;UseMvc&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; middleware looks for tokens (JSON Web Tokens or JWTs) in the HTTP Authorization header of incoming requests. If a valid token is found, the request is authorized. You then add the &lt;code class=&quot;highlighter-rouge&quot;&gt;[Authorize]&lt;/code&gt; attribute on your controllers or routes you want protected:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/protected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[Authorize]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Protected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Only if you have a valid token!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might be wondering: with only the authority and audience specified, how does the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; middleware validate incoming tokens?&lt;/p&gt;

&lt;h3 id=&quot;automatic-authorization-server-metadata&quot;&gt;Automatic Authorization Server Metadata&lt;/h3&gt;

&lt;p&gt;When the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; middleware handles a request for the first time, it tries to retrieve some metadata from the authorization server (also called an authority or issuer). This metadata, or &lt;em&gt;discovery document&lt;/em&gt; in OpenID Connect terminology, contains the public keys and other details needed to validate tokens. (Curious what the metadata looks like? Here’s an &lt;a href=&quot;https://nate-example.oktapreview.com/oauth2/default/.well-known/openid-configuration&quot;&gt;example discovery document&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;If the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; middleware finds this metadata document, it configures itself automatically. Pretty nifty!&lt;/p&gt;

&lt;p&gt;If the document doesn’t exist, you’ll get an error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;System.IO.IOException: IDX10804: Unable to retrieve document from: &quot;{yourAuthorizationServerAddress}&quot;.
System.Net.Http.HttpRequestException: Response status code does not indicate success: 404 (Not Found).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If your authorization server doesn’t publish this metadata, or you just want to specify the token validation parameters yourself, you can add them to the middleware configuration manually.&lt;/p&gt;
&lt;h3 id=&quot;specify-token-validation-parameters&quot;&gt;Specify Token Validation Parameters&lt;/h3&gt;
&lt;p&gt;The full set of &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; options can be used if you want fine-grained control over how your tokens are validated:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddJwtBearer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TokenValidationParameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenValidationParameters&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Clock skew compensates for server time drift.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We recommend 5 minutes or less:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ClockSkew&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Specify the key used to sign the token:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IssuerSigningKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signingKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RequireSignedTokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Ensure the token hasn't expired:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RequireExpirationTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidateLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Ensure the token audience matches our audience value (default true):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidateAudience&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidAudience&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;api://default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Ensure the token was issued by a trusted authorization server (default true):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidateIssuer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidIssuer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://nate-example.oktapreview.com/oauth2/default&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The most common options to set in &lt;code class=&quot;highlighter-rouge&quot;&gt;TokenValidationParameters&lt;/code&gt; are issuer, audience, and clock skew. You’ll also need to provide the key(s) your tokens will be signed with, which will look different depending on whether you’re using a symmetric or asymmetric key.&lt;/p&gt;

&lt;h2 id=&quot;understand-symmetric-and-asymmetric-signing&quot;&gt;Understand Symmetric and Asymmetric Signing&lt;/h2&gt;
&lt;p&gt;Tokens generated by your authorization server will be signed with either a symmetric key (HS256) or an asymmetric key (RS256). If your authorization server publishes a discovery document, it will include the key information so you don’t have to worry about how this works.&lt;/p&gt;

&lt;p&gt;However, if you’re configuring the middleware yourself or are validating tokens manually, you’ll have to understand how your tokens are signed. What’s the difference between symmetric and asymmetric keys?&lt;/p&gt;

&lt;h3 id=&quot;symmetric-keys&quot;&gt;Symmetric Keys&lt;/h3&gt;
&lt;p&gt;A symmetric key, also called a shared key or shared secret, is a secret value (like a password) that is kept on both the API (your application) and the authorization server that’s issuing tokens. The authorization server signs the token payload with the shared key, and the API validates that incoming tokens are properly signed using the same key.&lt;/p&gt;

&lt;p&gt;If you have a shared symmetric key, it’s easy to use it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; middleware:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// For example only! Don't store your shared keys as strings in code.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Use environment variables or the .NET Secret Manager instead.&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SymmetricSecurityKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mysupers3cr3tsharedkey!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddJwtBearer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TokenValidationParameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenValidationParameters&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Specify the key used to sign the token:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IssuerSigningKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RequireSignedTokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Other options...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure you keep the key safe! Storing it in your code (like the above example) is a bad idea since it’s easy to accidentally check it into source control. Instead, store it in environment variables on your server, or use the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets&quot;&gt;.NET Secret Manager&lt;/a&gt;. The &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/&quot;&gt;ASP.NET Core configuration model&lt;/a&gt; makes it easy to load the value from the environment or user secrets:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sharedKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SymmetricSecurityKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SigningKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Likewise, don’t store your shared key in your frontend code or expose it to the browser. It must be kept protected on your server.&lt;/p&gt;

&lt;h3 id=&quot;asymmetric-keys&quot;&gt;Asymmetric Keys&lt;/h3&gt;
&lt;p&gt;With asymmetric signing, you don’t need to keep a secret key on your server. Instead, a public/private keypair is used: the authorization server signs tokens with a secret private key, and publishes a public key that anyone can use to validate tokens.&lt;/p&gt;

&lt;p&gt;Usually, the public key information is automatically retrieved from the discovery document as described in the section above. If you need to specify it manually, you’ll need to get the key parameters from the authorization server and create a &lt;code class=&quot;highlighter-rouge&quot;&gt;SecurityKey&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Manually specify a public (asymmetric) key published as a JWK:&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publicJwk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonWebKey&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;KeyId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(some key ID)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Alg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;RS256&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AQAB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(a long string)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Kty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;RSA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sig&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In most cases, the public keys are available in a JSON Web Key Set (JWKS) on the authorization server (here’s an &lt;a href=&quot;https://nate-example.oktapreview.com/oauth2/default/v1/keys&quot;&gt;example JWKS&lt;/a&gt;). The authorization server may rotate the keys periodically, too, so you’ll need to check for updated keys regularly. If you let the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; middleware auto-configure via the discovery document, this all works automatically!&lt;/p&gt;

&lt;h2 id=&quot;validate-tokens-manually-in-aspnet-core&quot;&gt;Validate Tokens Manually in ASP.NET Core&lt;/h2&gt;
&lt;p&gt;In some cases, you might need to validate tokens &lt;em&gt;without&lt;/em&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; middleware. Using the middleware should always be the first choice, since it plugs nicely (and automatically) into the ASP.NET Core authorization system.&lt;/p&gt;

&lt;p&gt;If you absolutely need to validate a JWT by hand, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtSecurityTokenHandler&lt;/code&gt; in the &lt;a href=&quot;https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt&quot;&gt;System.IdentityModel.Tokens.Jwt&lt;/a&gt; package. It uses the same &lt;code class=&quot;highlighter-rouge&quot;&gt;TokenValidationParameters&lt;/code&gt; class to specify the validation options:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JwtSecurityToken&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ValidateAndDecode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecurityKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signingKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validationParameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TokenValidationParameters&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Clock skew compensates for server time drift.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// We recommend 5 minutes or less:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ClockSkew&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromMinutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Specify the key used to sign the token:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IssuerSigningKeys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signingKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RequireSignedTokens&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Ensure the token hasn't expired:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RequireExpirationTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidateLifetime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Ensure the token audience matches our audience value (default true):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidateAudience&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidAudience&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;api://default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Ensure the token was issued by a trusted authorization server (default true):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidateIssuer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ValidIssuer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://nate-example.oktapreview.com/oauth2/default&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;claimsPrincipal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JwtSecurityTokenHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ValidateToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validationParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawValidatedToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwtSecurityToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValidatedToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Or, you can return the ClaimsPrincipal&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (which has the JWT properties automatically mapped to .NET claims)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SecurityTokenValidationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stvex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The token failed validation!&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO: Log it or display an error.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Token failed validation: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stvex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The token was not well-formed or was invalid for some other reason.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO: Log it or display an error.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Token was invalid: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If your authorization server publishes a metadata document, you can retrieve it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenIdConnectConfigurationRetriever&lt;/code&gt; class in the &lt;a href=&quot;https://www.nuget.org/packages/Microsoft.IdentityModel.Protocols.OpenIdConnect/&quot;&gt;Microsoft.IdentityModel.Protocols.OpenIdConnect&lt;/a&gt; package. This will let you get signing keys automatically:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenIdConnectConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .well-known/oauth-authorization-server or .well-known/openid-configuration&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;{yourAuthorizationServerAddress}/.well-known/openid-configuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OpenIdConnectConfigurationRetriever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HttpDocumentRetriever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discoveryDocument&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurationManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetConfigurationAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signingKeys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discoveryDocument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SigningKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That takes care of the &lt;em&gt;validation&lt;/em&gt; side of token authentication, but what about generating the tokens themselves?&lt;/p&gt;

&lt;h2 id=&quot;generate-tokens-for-authentication-in-aspnet-core&quot;&gt;Generate Tokens for Authentication in ASP.NET Core&lt;/h2&gt;
&lt;p&gt;Back in the ASP.NET 4.5 days, the &lt;code class=&quot;highlighter-rouge&quot;&gt;UseOAuthAuthorizationServer&lt;/code&gt; middleware gave you an endpoint that could easily generate tokens for your application. However, the ASP.NET Core team &lt;a href=&quot;https://stackoverflow.com/a/29144031/3191599&quot;&gt;decided not to bring it to ASP.NET Core&lt;/a&gt;, which means that you’ll need to plug something else in. Specifically, you’ll need to either find or build an authorization server that can generate tokens.&lt;/p&gt;

&lt;p&gt;The two common ways to get an authorization server are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using a cloud service like Azure AD B2C or &lt;a href=&quot;/quickstart/#/widget/dotnet/aspnetcore&quot;&gt;Okta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Building or configuring your own&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hosted-authorization-server-with-okta&quot;&gt;Hosted Authorization Server with Okta&lt;/h3&gt;
&lt;p&gt;A hosted authorization server is the easiest way to generate tokens, because you don’t need to build (or maintain) anything yourself. You can sign up for a &lt;a href=&quot;https://developer.okta.com/signup/&quot;&gt;free account&lt;/a&gt; and then follow the &lt;a href=&quot;/quickstart/#/widget/dotnet/aspnetcore&quot;&gt;Okta + ASP.NET Core API quickstart&lt;/a&gt; for step-by-step instructions.&lt;/p&gt;

&lt;p&gt;Since the authorization server Okta creates for you has a standard discovery document, the &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtBearer&lt;/code&gt; configuration is super simple:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationScheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddJwtBearer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>/oauth2/default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Audience&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;api://default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to roll your own authorization server, you can use one of the popular &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/authentication/community&quot;&gt;community-built packages&lt;/a&gt;:&lt;/p&gt;

&lt;h3 id=&quot;openiddict&quot;&gt;OpenIddict&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/openiddict/openiddict-core&quot;&gt;OpenIddict&lt;/a&gt; is an easy-to-configure authorization server that works nicely with &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity&quot;&gt;ASP.NET Core Identity&lt;/a&gt; and Entity Framework Core. It plugs right into the ASP.NET Core middleware pipeline and is easy to configure.&lt;/p&gt;

&lt;p&gt;OpenIddict is a great choice if you’re already using ASP.NET Core Identity and want to generate tokens for your users. You can follow Mike Rousos’ in-depth &lt;a href=&quot;https://blogs.msdn.microsoft.com/webdev/2016/10/27/bearer-token-authentication-in-asp-net-core/&quot;&gt;tutorial on the MSDN blog&lt;/a&gt; to set it up and configure it in your application.&lt;/p&gt;

&lt;h3 id=&quot;asos&quot;&gt;ASOS&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server&quot;&gt;AspNet.Security.OpenIdConnect.Server&lt;/a&gt; package is lower-level than OpenIddict (in fact, OpenIddict uses it under the hood). It takes more work to set up, but it’s useful when you want to have more direct control over how the OpenID Connect protocol is handled and how tokens are generated. 
Kévin Chalet has an in-depth &lt;a href=&quot;http://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/&quot;&gt;tutorial on creating an OpenID Connect server&lt;/a&gt; on his blog.&lt;/p&gt;

&lt;h3 id=&quot;identityserver4&quot;&gt;IdentityServer4&lt;/h3&gt;
&lt;p&gt;Thinktecture’s open-source &lt;a href=&quot;https://github.com/IdentityServer/IdentityServer4&quot;&gt;IdentityServer project&lt;/a&gt; has been around for a long time, and it got a major update for .NET Core with IdentityServer4. Of the three packages discussed here, it’s the most powerful and flexible.&lt;/p&gt;

&lt;p&gt;IdentityServer is a good choice when you want to roll your own full-fledged OpenID Connect authorization server that can handle complex use cases like federation and single sign-on. Depending on your use case, configuring IdentityServer4 can be a little complicated. Fortunately, the &lt;a href=&quot;http://docs.identityserver.io/en/release/&quot;&gt;official documentation&lt;/a&gt; covers many common scenarios.&lt;/p&gt;

&lt;h2 id=&quot;token-authentication-can-be-complex&quot;&gt;Token Authentication Can Be Complex!&lt;/h2&gt;
&lt;p&gt;I hope this article helps it feel a little less confusing. The ASP.NET Core team has done a great job of making it easy to add token authentication to your ASP.NET Core API, and options like OpenIddict and Okta make it easy to spin up an authorization server that generates tokens for your clients.&lt;/p&gt;

&lt;p&gt;Here are some more resources if you want to keep learning:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2018/02/01/secure-aspnetcore-webapi-token-auth&quot;&gt;How to Secure Your .NET Web API with Token Authentication&lt;/a&gt; here on the Okta blog&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://andrewlock.net/a-look-behind-the-jwt-bearer-authentication-middleware-in-asp-net-core/&quot;&gt;deep dive into the JWT bearer middleware&lt;/a&gt; on Andrew Lock’s blog&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/06/21/what-the-heck-is-oauth&quot;&gt;What the Heck is OAuth?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our &lt;a href=&quot;/blog/2017/07/25/oidc-primer-part-1&quot;&gt;primer on OpenID Connect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=996OiexHze0&quot;&gt;OAuth and OpenID Connect in plain English&lt;/a&gt; on YouTube, by yours truly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’d love to hear your feedback! If you have questions or thoughts, post a comment below. You can also reach us on Twitter &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;@oktadev&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 23 Mar 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/03/23/token-authentication-aspnetcore-complete-guide</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/03/23/token-authentication-aspnetcore-complete-guide</guid>
      </item>
    
      <item>
        <title>Add Single Sign-on to Your Dropwizard Server in 15 Minutes </title>
        <description>&lt;p&gt;Dropwizard is recognized as the pioneer in turn-key Java API frameworks, and rivals Spring Boot for ease of adoption. Whether you’re interested in trying it out for the first time, or already have a mature platform built on top of Dropwizard, you can add secure authentication to your site in a matter of minutes. By combining Dropwizard’s production-ready essential libraries and Okta’s identity platform, you can construct a fully secured internet-facing web service with little effort. Read on to see how!&lt;/p&gt;

&lt;p&gt;This tutorial assumes familiarity with Java, Maven, and basic web service and web security concepts. The first section sets up a new Dropwizard server from scratch, so if you already have one up and running, feel free to skip ahead and integrate With Okta]. You can also find the completed code example on &lt;a href=&quot;https://github.com/oktadeveloper/okta-dropwizard-oauth-example&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dropwizard-vs-spring-boot&quot;&gt;Dropwizard vs. Spring Boot&lt;/h2&gt;

&lt;p&gt;A number of excellent articles and blog posts (notably &lt;a href=&quot;https://blog.takipi.com/java-bootstrap-dropwizard-vs-spring-boot/&quot;&gt;Takipi&lt;/a&gt; and &lt;a href=&quot;https://www.schibsted.pl/blog/spring-boot-and-dropwizard-in-microservices-development/&quot;&gt;Schibsted&lt;/a&gt;) provide thorough comparisons of the two frameworks on both a feature-set level and from an architectural perspective. While Spring Boot has been eclipsing Dropwizard lately in popularity, Dropwizard still provides a compelling out-of-the-box distribution.&lt;/p&gt;

&lt;p&gt;Most of the differences boil down to what is included by default vs. offered as an add-on library. With no other setup needed, Dropwizard gives you exhaustive API metrics, logging, and a handful of useful libraries and tools such as Jackson, Liquibase, Hibernate, and a few page-templating frameworks. Spring Boot requires that you specify most of these extras, which adds a little more thought, planning, and effort to new server creation. The benefit, however, is greater flexibility and a wider variety of options (such as multiple HTTP server alternatives and less coupling to specific libraries).&lt;/p&gt;

&lt;p&gt;Both frameworks provide a well-integrated, mature, production-ready insta-server, and the choice between the two usually falls according to preference of one system’s libraries over the other. If you need the Swiss Army knife, or prefer to leave more options open, Spring Boot may be the way to go. If you’re a fan of Jetty, Hibernate, Jersey, et al. and just want to start coding immediately, Dropwizard is hard to beat.&lt;/p&gt;

&lt;h2 id=&quot;generate-a-new-dropwizard-server&quot;&gt;Generate a New Dropwizard Server&lt;/h2&gt;

&lt;p&gt;First things first, you’ll need a running server. The Dropwizard Maven archetype is a convenient way to create a new project. You can execute the following command to start in interactive mode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn archetype:generate \
    -DarchetypeGroupId=io.dropwizard.archetypes \
    -DarchetypeArtifactId=java-simple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When prompted for various project names, this example used &lt;strong&gt;com.example&lt;/strong&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;groupId&lt;/code&gt;, &lt;strong&gt;demo&lt;/strong&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;artifactId&lt;/code&gt;, and &lt;strong&gt;Demo&lt;/strong&gt; for the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;. The rest were given default values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/dropwizard-oauth/maven-archetype-bb12f64c4880b4493594009eb123d25cfffdaf64e598a40cfcdbc886b6ccf70f.png&quot; alt=&quot;Maven archetype output&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Almost like a TODO list, Dropwizard outlines the fundamental components of your server by creating a bunch of empty directories. Most of those can be left alone for now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/dropwizard-oauth/project-tree-a79ca1b2cbc30f470d068fb44ec2b7a51abe4236593a10b6a305848cdf2ad250.png&quot; alt=&quot;Directory structure&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To start penciling in the new server, create a &lt;code class=&quot;highlighter-rouge&quot;&gt;HomePageResource.java&lt;/code&gt; class in the &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.resources&lt;/code&gt; package. This will serve as the “Hello world” entry point for testing, and can be enhanced later on with one of Dropwizard’s built-in HTML templating libraries. Two key annotations are needed: one &lt;code class=&quot;highlighter-rouge&quot;&gt;@Path(&quot;/&quot;)&lt;/code&gt; annotation at the class level, indicating that this resource will handle requests to your server’s root URI, and one JAX-RS &lt;code class=&quot;highlighter-rouge&quot;&gt;@GET&lt;/code&gt; annotation applied to a simple function that returns a test string.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomePageResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleGetRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello from Dropwizard!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now back in &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.DemoApplication&lt;/code&gt;, register this new resource with Jersey in the provided &lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DemoConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomePageResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, it’s time to give the server a quick run and make sure all is working as expected. The following two commands will build and start the server on its default port of 8080:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package
java -jar target/demo-1.0-SNAPSHOT.jar server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once it’s running, visiting &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt; in your browser should relay your Hello world message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/dropwizard-oauth/hello-world-016d34e2f54236e846d76b232996f14c531594b2ea22ee7910f86e3715216ba4.png&quot; alt=&quot;Basic hello world response&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before getting too fancy with the UI, now is a great opportunity to enable single sign-on for your server. The next section will walk you through the process!&lt;/p&gt;

&lt;h2 id=&quot;integrate-with-okta-for-oauth-20&quot;&gt;Integrate With Okta for OAuth 2.0&lt;/h2&gt;

&lt;p&gt;Since one of Dropwizard’s goals is to make it easy to create RESTful applications, it provides support for creating OAuth 2.0 Resource Server. However, the actual implementation is just a stub and requires you to implement the actual handling of the access token. Okta has created an access token validation library (okta-jwt-verifier) to make it easy to plug this logic into any application.&lt;/p&gt;

&lt;h3 id=&quot;create-an-okta-account-and-gather-credentials&quot;&gt;Create an Okta Account and Gather Credentials&lt;/h3&gt;

&lt;p&gt;If you don’t already have a free Okta account, you can follow &lt;a href=&quot;/blog/2017/10/27/secure-spa-spring-boot-oauth#get-your-oauth-info-ready&quot;&gt;these instructions&lt;/a&gt; to create one and set up your first Okta application. There are four important values you will want to take note of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client ID - e.g.: &lt;strong&gt;&lt;em&gt;oot9wrjjararhfaa&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Client secret - e.g.: &lt;strong&gt;&lt;em&gt;(Your Client Secret)&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Issuer - e.g.: &lt;strong&gt;&lt;em&gt;https://dev-123123.oktapreview.com/oauth2/default&lt;/em&gt;&lt;/strong&gt; …be sure to include the &lt;strong&gt;&lt;em&gt;/oauth2/default&lt;/em&gt;&lt;/strong&gt; path!&lt;/li&gt;
  &lt;li&gt;Login redirect URI - this will be &lt;strong&gt;&lt;em&gt;http://localhost:8080/login&lt;/em&gt;&lt;/strong&gt; if you followed the instructions above.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;use-dropwizard-configuration-to-store-your-oauth-settings&quot;&gt;Use Dropwizard Configuration to Store Your OAuth Settings&lt;/h3&gt;

&lt;p&gt;Dropwizard’s configuration mechanism is quite easy to work with. All that’s needed is a YAML file with some config values defined, and a matching POJO to access the values at runtime (in this case, that POJO is the &lt;code class=&quot;highlighter-rouge&quot;&gt;DemoConfiguration&lt;/code&gt; class). You should already have a &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; in the root of the example directory. Create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;oktaOAuth&lt;/code&gt; section and add your OAuth connection details as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;oktaOAuth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>/oauth2/default&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{yourClientId}&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;audience&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{yourAudience}&quot;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# defaults to ‘api://default’&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To cut down on boilerplate, this example just adds these fields as publicly accessible members. You may prefer adding getters and setters, or even using &lt;a href=&quot;ttps://projectlombok.org&quot;&gt;Lombok&lt;/a&gt; to do that for you.&lt;/p&gt;

&lt;p&gt;Create a new class &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.models.OktaOAuthConfig&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OktaOAuthConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audience&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now add our new model to the &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.DemoConfiguration&lt;/code&gt; class..&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OktaOAuthConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oktaOAuth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OktaOAuthConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now these config values can be easily retrieved in the &lt;code class=&quot;highlighter-rouge&quot;&gt;DemoApplication&lt;/code&gt; class via its inherited &lt;code class=&quot;highlighter-rouge&quot;&gt;configuration&lt;/code&gt; member.&lt;/p&gt;

&lt;h3 id=&quot;handle-the-oauth-20-access-token&quot;&gt;Handle the OAuth 2.0 Access Token&lt;/h3&gt;

&lt;p&gt;As I mentioned above Dropwizard’s OAuth support still requires you to handle the access token yourself. No worries though, you can do that in a few lines of code with the Okta JWT Verifier.&lt;/p&gt;

&lt;p&gt;First up, add the &lt;code class=&quot;highlighter-rouge&quot;&gt;dropwizard-auth&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;okta-jwt-verifier&lt;/code&gt; dependencies to your &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.dropwizard&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;dropwizard-auth&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.okta.jwt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;okta-jwt-verifier&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.3.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-a-principal-implementation&quot;&gt;Create a Principal Implementation&lt;/h4&gt;

&lt;p&gt;Next up, I need to create a class to hold the user’s information.  Dropwizard expects class to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;java.security.Principal&lt;/code&gt;. Create a new class &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.auth.AccessTokenPrincipal&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccessTokenPrincipal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Principal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;AccessTokenPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Jwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// the 'sub' claim in the access token will be the email address&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClaims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sub&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above class basically just wraps an &lt;code class=&quot;highlighter-rouge&quot;&gt;com.okta.jwt.Jwt&lt;/code&gt; and exposes it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;Principal&lt;/code&gt; and uses the email address in the &lt;code class=&quot;highlighter-rouge&quot;&gt;sub&lt;/code&gt; claim for the name.&lt;/p&gt;

&lt;h4 id=&quot;dropwizard-authentication&quot;&gt;Dropwizard Authentication&lt;/h4&gt;

&lt;p&gt;So far so good, next, create a new class &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.auth.OktaOAuthAuthenticator&lt;/code&gt;.  This is where the magic happens!  This class will implement &lt;code class=&quot;highlighter-rouge&quot;&gt;io.dropwizard.auth.Authenticator&lt;/code&gt; and validate the access token:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OktaOAuthAuthenticator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Authenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessTokenPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JwtVerifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OktaOAuthAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JwtVerifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jwtVerifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccessTokenPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthenticationException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Jwt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jwtVerifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decodeAccessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// if we made it this far we have a valid jwt&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessTokenPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jwt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JoseException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthenticationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is it, basically two lines of code, one to validate the token another to return our custom principal type!&lt;/p&gt;

&lt;h4 id=&quot;wire-it-up&quot;&gt;Wire it up!&lt;/h4&gt;

&lt;p&gt;The last step is to wire this all up in our application class, edit &lt;code class=&quot;highlighter-rouge&quot;&gt;DemoApplication&lt;/code&gt; and create a new method &lt;code class=&quot;highlighter-rouge&quot;&gt;configureOAuth()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureOAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DemoConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OktaOAuthConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widgetConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oktaOAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Configure the JWT Validator, it will validate Okta's JWT access tokens&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;JwtHelper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JwtHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIssuerUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widgetConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setClientId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widgetConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// set the audience only if set, otherwise the default is: api://default&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audience&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widgetConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;audience&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audience&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAudience&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audience&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// register the OktaOAuthAuthenticator&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthDynamicFeature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OAuthCredentialAuthFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccessTokenPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OktaOAuthAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bearer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildAuthFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Bind our custom principal to the @Auth annotation&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthValueFactoryProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccessTokenPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to configure JwtVerifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method does a couple things: creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;JwtVerifier&lt;/code&gt; based on the properties in our configuration file, registers the new &lt;code class=&quot;highlighter-rouge&quot;&gt;OktaOAuthAuthenticator&lt;/code&gt; class, and finally binds the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Auth&lt;/code&gt; annotation to our new &lt;code class=&quot;highlighter-rouge&quot;&gt;AccessTokenPrincipal&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Don’t forget to update the &lt;code class=&quot;highlighter-rouge&quot;&gt;run()&lt;/code&gt; method with a call to our new &lt;code class=&quot;highlighter-rouge&quot;&gt;configureOAuth()&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DemoConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// configure OAuth&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configureOAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// add resources&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomePageResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, update the &lt;code class=&quot;highlighter-rouge&quot;&gt;HomePageResource&lt;/code&gt; to require authentication and add bit more personalization using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Auth&lt;/code&gt; annotation.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomePageResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleGetRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Auth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessTokenPrincipal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello! We'll be contacting you at: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tokenPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You could restart the server and start handling requests!  But… you of course need to get an access token from some place. If you were handling class from another OAuth capable application you could stop here. However, since this is an example I’m going to add simple login page using the Okta Sign-In Widget.&lt;/p&gt;

&lt;h3 id=&quot;add-the-okta-sign-in-widget&quot;&gt;Add the Okta Sign-In Widget&lt;/h3&gt;

&lt;p&gt;Adding a login page to our RESTful application does mix concerns a little.  I’m going to do this to simplify the example and at the same time show you a few more cool things with Dropwizard.&lt;/p&gt;

&lt;h4 id=&quot;expose-the-oauth-configuration-via-rest&quot;&gt;Expose the OAuth Configuration via REST&lt;/h4&gt;

&lt;p&gt;Since there is nothing secret in our OAuth configuration (access tokens to not require a &lt;em&gt;client secret&lt;/em&gt; to be validated) we can expose our &lt;code class=&quot;highlighter-rouge&quot;&gt;OktaOAuthConfig&lt;/code&gt; with a new JAX-RS resource.  Create a new class &lt;code class=&quot;highlighter-rouge&quot;&gt;com.example.resources.LoginWidgetConfigResource&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/signInConfig&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoginWidgetConfigResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OktaOAuthConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoginWidgetConfigResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OktaOAuthConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@GET&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OktaOAuthConfig&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pretty simple, it’s just a getter with a &lt;code class=&quot;highlighter-rouge&quot;&gt;@GET&lt;/code&gt; annotation!&lt;/p&gt;

&lt;p&gt;Back in our &lt;code class=&quot;highlighter-rouge&quot;&gt;DemoApplication&lt;/code&gt; class you need to register the new resource in the &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoginWidgetConfigResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oktaOAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;add-a-login-page&quot;&gt;Add a Login Page&lt;/h4&gt;

&lt;p&gt;Before creating a login page I need to configure Dropwizard to serve static assets using the concept of an &lt;code class=&quot;highlighter-rouge&quot;&gt;AssetsBundle&lt;/code&gt;, this will require another dependency in your &lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.dropwizard&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;dropwizard-assets&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;DemoApplicaiton&lt;/code&gt; class you can register this bundle in the &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bootstrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DemoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssetsBundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assets/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;index.html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This configures the application to serve all of the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main/resources/assets&lt;/code&gt; at the root (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) of your application.  It also defines &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; as the default welcome file.&lt;/p&gt;

&lt;p&gt;This creates a small issue.  If you restart your application now it would throw an exception.  Both our static assets and our resources are being service from the root context.  The easy fix is to serve your API resources at &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/*&lt;/code&gt; with a single line in your application’s &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; method, the whole method should now look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DemoConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// base url for our resources&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUrlPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api/*&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// configure OAuth&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configureOAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// add resources&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HomePageResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jersey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoginWidgetConfigResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oktaOAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only thing left to do create a login page.  I’m actually going to create a simple SPA app with a single &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file.  This page will load the widget configuration from &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/signInConfig&lt;/code&gt;, prompt the user to login, and then display the results from a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/message&lt;/code&gt;.  I’m not going to dig into the contents of the HTML, if you are interested you should be able to follow the comments.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dropwizard OAuth 2.0 Example&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;base&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/js/okta-sign-in.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/css/okta-sign-in.min.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.6.0/css/okta-theme.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Render the login widget here --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;okta-login-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Render the REST response here --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;api-message&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- And a logout button, hidden by default --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-danger&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;display:none&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/api/signInConfig&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// we are priming our config object with data retrieved from the server in order to make this example easier to run&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// You could statically define your config like if you wanted too:&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/*
      let config = {
        baseUrl: 'https://dev-123456.oktapreview.com',
        clientId: '00icu81200icu812w0h7',
        redirectUri: 'http://localhost:8080',
        authParams: {
          issuer: 'https://dev-123456.oktapreview.com/oauth2/default',
          responseType: ['id_token', 'token']
        }
      }; */&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oktaSignIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OktaSignIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;redirectUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;authParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;openid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;profile&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// handle the rest of the page&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;doInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
   * Makes a request to a REST resource and displays a simple message to the page.
   * @param accessToken The access token used for the auth header
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderApiMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// include the Bearer token in the request&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/api/message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Authorization'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bearer &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Render the message of the day&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htmlToRender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`
            &amp;lt;h1&amp;gt;Message:
              &amp;lt;small&amp;gt;/api/message&amp;lt;/small&amp;gt;
            &amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#api-message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;htmlToRender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// handle any errors&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#api-message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ERROR, check your browsers console log!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ERROR!!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// show the logout button&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#logout&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'block'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#logout&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;oktaSignIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;signOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;oktaSignIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokenManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Check if we already have an access token&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oktaSignIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokenManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'my_access_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// if we do great, just go with it!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;renderApiMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// otherwise show the login widget&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;oktaSignIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'#okta-login-container'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;// check if success&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SUCCESS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// for our example we have the id token and the access token&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// oktaSignIn.tokenManager.add('my_id_token', response[0]);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;oktaSignIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokenManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'my_access_token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// hide the widget&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;oktaSignIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// now for the fun part!&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;renderApiMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// handle any errors&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Whew! You’ve emerged from the jungle of hand-rolled OIDC clients, and now have authorization in your Dropwizard server! There were quite a few code examples above, so if you need to verify anything you built along the way, you can always access the &lt;a href=&quot;https://github.com/oktadeveloper/okta-dropwizard-oauth-example&quot;&gt;complete source for this project&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;Ok… time to see it in action! You can once again build the project with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…but this time, you’ll also need to specify the location of the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; as a command line argument when starting the server. It needs to include the path relative to the current working directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java &lt;span class=&quot;nt&quot;&gt;-jar&lt;/span&gt; target/demo-1.0-SNAPSHOT.jar server config.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Visiting &lt;code class=&quot;highlighter-rouge&quot;&gt;http:/localhost:8080&lt;/code&gt; in your browser should now redirect you to sign in on Okta’s domain, and following that, should present a message with your email address. If so, congratulations! If you’ve had difficulty at any point along the way, try running the &lt;a href=&quot;https://github.com/oktadeveloper/okta-dropwizard-oauth-example&quot;&gt;example&lt;/a&gt; as is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/dropwizard-oauth/spa-message-success-ae818d973152cdd869c462cecdd6969bca0d6cc34b110bf0178bd42ef2105b37.png&quot; alt=&quot;Post login message showing API response&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;extra-credit-health-checks&quot;&gt;Extra Credit: Health Checks&lt;/h2&gt;

&lt;p&gt;You probably have noticed the console warnings when starting your application:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!    THIS APPLICATION HAS NO HEALTHCHECKS. THIS MEANS YOU WILL NEVER KNOW      !
!     IF IT DIES IN PRODUCTION, WHICH MEANS YOU WILL NEVER KNOW IF YOU'RE      !
!    LETTING YOUR USERS DOWN. YOU SHOULD ADD A HEALTHCHECK FOR EACH OF YOUR    !
!         APPLICATION'S DEPENDENCIES WHICH FULLY (BUT LIGHTLY) TESTS IT.       !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dropwizard makes it really easy to add existing health checks or create your own. I’ll leave that as an exercise for you!&lt;/p&gt;

&lt;h2 id=&quot;learn-more&quot;&gt;Learn More&lt;/h2&gt;

&lt;p&gt;In this post I’ve created a self contained Dropwizard application with a couple JAX-RS resources and a simple HTML page. Take a look at Dropwizard’s getting started guide or these resources for more info.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.dropwizard.io/&quot;&gt;Dropwizard Homepage&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/08/09/jax-rs-vs-spring-rest-endpoints&quot;&gt;Let’s Compare: JAX-RS vs Spring for REST Endpoints&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/06/21/what-the-heck-is-oauth&quot;&gt;What the Heck is OAuth?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you’ve enjoyed this post, and are always eager to hear from you. Leave a comment below, or hit us up on Twitter &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;@oktadev&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/03/21/dropwizard-oauth</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/03/21/dropwizard-oauth</guid>
      </item>
    
      <item>
        <title>How to Achieve Massive Productivity at Work</title>
        <description>&lt;p&gt;“Productivity is all about efficiency and planning.” – Mahdi Yusuf, &lt;a href=&quot;https://www.iterateconf.io/&quot;&gt;Iterate&lt;/a&gt; 2018&lt;/p&gt;

&lt;p&gt;Like most developers, I love getting shit done. My best days are when I feel like I’ve been massively productive. When the Stormpath team joined Okta in February 2018, it was a tough transition at first. I’d started to get into the flow of writing blog posts about Stormpath’s SDKs and had a bunch queued up. But Okta didn’t have SDKs like Stormpath, that’s why they hired us!&lt;/p&gt;

&lt;p&gt;Fast forward a year and I feel like I’m in the groove again. And happily, it didn’t take me a year to find my groove at Okta. In fact, I was able to figure it out within the first couple months. My journey started in March of last year when I googled for “Spring Boot Okta” and discovered there wasn’t a lot of information on integrating the two. I wrote two blog posts that didn’t require SDKs because Spring Security already had great support for &lt;a href=&quot;/blog/2017/03/16/spring-boot-saml&quot;&gt;SAML&lt;/a&gt; and &lt;a href=&quot;/blog/2017/03/21/spring-boot-oauth&quot;&gt;OAuth 2.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the end of March, I journeyed to Devoxx France, and &lt;a href=&quot;https://raibledesigns.com/rd/entry/angular_and_cloud_native_pwas&quot;&gt;had a great time speaking with Josh Long&lt;/a&gt;. The reason I tell this story is because I had an epiphany on the flight home.&lt;/p&gt;

&lt;p&gt;I had so many things I wanted to do and blog about that I wrote down a &lt;strong&gt;Six-Week Plan&lt;/strong&gt;. I’ve done a six-week plan ever since, and it’s significantly contributed to my productivity at Okta. I’ve learned quite a few things along the way, so I thought I’d share them with you today.&lt;/p&gt;

&lt;h2 id=&quot;create-a-six-week-productivity-plan&quot;&gt;Create a Six-Week Productivity Plan&lt;/h2&gt;

&lt;p&gt;I create a six-week plan in the Notes app on my Mac because it’s easy to edit on my laptop or my phone. Google Docs will likely work just as well. I write down Monday’s date, followed by a list of 2-5 items I’d like to accomplish that week. Here are the first two weeks of my initial plan:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;April 10:
    Zuul support for Okta or change presentation to showcase SAML, OAuth, and JWT
    Angular OpenID Connect blog post
    PWA with Spring Boot blog post
    Schedule vJUG (June?) for Josh and my talk on Cloud Native PWAs
April 17:
    Polish presentation for Prospecting the Security Landscape
    Deliver presentation in St. Louis
    Edit/publish blog posts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I send this to my boss and co-workers for feedback. There’s usually a comment or two, and I adjust accordingly. At the end of the six weeks, I do a retrospective via email to everyone and send a new plan.&lt;/p&gt;

&lt;h3 id=&quot;use-remember-the-milk&quot;&gt;Use Remember The Milk&lt;/h3&gt;

&lt;p&gt;I use &lt;a href=&quot;https://www.rememberthemilk.com&quot;&gt;Remember The Milk&lt;/a&gt; to plan my week. You could use anything, but I’d recommend something that works on your laptop and phone and allows for reminders. I take the items from my six-week plan and add them to different days of the week. I’ve learned to say “Start” and “Finish” on tasks because starting is often the hardest part. For some tasks, I’ll set a time, so I get a reminder.&lt;/p&gt;

&lt;p&gt;I often don’t complete tasks I’ve scheduled. I re-arrange my week’s schedule often.&lt;/p&gt;

&lt;h2 id=&quot;go-dark-for-productivity&quot;&gt;Go Dark for Productivity&lt;/h2&gt;

&lt;p&gt;I’m a remote worker, which means almost all communication happens via email or Slack. I’m one of those lucky people that don’t get a lot of work-related emails, but I do get a lot of notifications from the open source projects I contribute to.&lt;/p&gt;

&lt;p&gt;Slack is a terribly distracting tool and I’ve learned to turn it off.&lt;/p&gt;

&lt;p&gt;My second biggest secret, aside from the six week plan, is I &lt;em&gt;go dark&lt;/em&gt; to get stuff done. I try to do at least a day per week, but sometimes I need two or three. It’s OK with my co-workers as they rarely need an immediate reply from me. If they do, they know my phone number.&lt;/p&gt;

&lt;h2 id=&quot;do-the-hard-stuff-early-in-the-week&quot;&gt;Do the Hard Stuff Early in the Week&lt;/h2&gt;

&lt;p&gt;I try to go dark early in the week. The hardest thing I do in a typical week is to write a blog post. Often, I don’t know if the blog post is even possible (e.g., show how to log in to Okta with React Native) to write. I spend a day or two writing an example app, then 4-8 hours writing a blog post about how I did it.&lt;/p&gt;

&lt;p&gt;If I need to write a new presentation for a speaking engagement, I create a story/outline with a beginning, middle, and end. Then I create the slides to follow the outline, accompanied by images or pictures that help tell the story. I’ve been tempted to ditch the slides, but I like to think one of my trademarks is presentations that look good.&lt;/p&gt;

&lt;h3 id=&quot;write-in-markdown-edit-in-google-docs&quot;&gt;Write in Markdown, Edit in Google Docs&lt;/h3&gt;

&lt;p&gt;I’ve written most of my blog posts in Markdown over the last year. For books I’ve authored, I prefer Asciidoctor. I used to author blog posts in Google Docs, go through the editing process, then create the files for production from that. I’ve learned it’s better (and easier!) to start with the production files, then copy the raw text into Google Docs. This makes it much easier to copy the text back into the production files, review the changes, and commit/push in minutes.&lt;/p&gt;

&lt;p&gt;If your editor can’t understand Markdown/AsciiDoc, it’s time to find a new editor!&lt;/p&gt;

&lt;p&gt;The reason I recommend editing in Google Docs is because it’s easy to add/accept suggestions and comments. It’s very efficient for editors and writers alike.&lt;/p&gt;

&lt;p&gt;I also highly recommend &lt;a href=&quot;https://www.grammarly.com/&quot;&gt;Grammarly&lt;/a&gt; to reduce the burden on your editor.&lt;/p&gt;

&lt;h2 id=&quot;allow-for-zero-productivity-days&quot;&gt;Allow for Zero Productivity Days&lt;/h2&gt;

&lt;p&gt;I was frustrated early on when priorities would shift, and I wasn’t able to accomplish the items on my six-week plan. I’ve since learned to be flexible and even embrace zero productivity. On these days, I’ll do the opposite of going dark. I’ll be fully online, responding to questions on our &lt;a href=&quot;https://devforum.okta.com/&quot;&gt;Developer Forums&lt;/a&gt;, participating in Slack discussions, and trying to reach the elusive Inbox Zero.&lt;/p&gt;

&lt;p&gt;These days are non-productive in my mind, but they’re &lt;em&gt;very&lt;/em&gt; helpful to other developers, and I believe they greatly help my team succeed.&lt;/p&gt;

&lt;h2 id=&quot;minimize-your-travel&quot;&gt;Minimize Your Travel&lt;/h2&gt;

&lt;p&gt;Last year, I spoke at 22 different events. It was exhausting, and I only traveled a couple of times per month!&lt;/p&gt;

&lt;p&gt;The Developer Relations team at &lt;a href=&quot;/blog/2017/08/21/what-is-developer-relations-at-okta#how-devrel-works-at-okta&quot;&gt;Okta believes that Content is King and speaking is secondary&lt;/a&gt;. In fact, our leadership doesn’t mind if we don’t speak. They’d rather see us write blog posts because they reach thousands instead of hundreds.&lt;/p&gt;

&lt;p&gt;We also believe in having a regional community presence and participating in/sponsoring local meetups. It’s tough to attend your local meetups if you’re traveling all the time.&lt;/p&gt;

&lt;p&gt;When you’re traveling, it’s difficult to have a regular routine. Especially if you’re going to conferences that have lots of your friends there and a plethora of social activities.&lt;/p&gt;

&lt;p&gt;Traveling is hard on the body and mind. For this reason, I try to minimize the items in my six-week plan during the weeks I travel. Even on days when I attend meetups, I adjust my schedule and consider them travel days.&lt;/p&gt;

&lt;h2 id=&quot;go-on-walks-during-meetings&quot;&gt;Go on Walks During Meetings&lt;/h2&gt;

&lt;p&gt;I feel very fortunate in that I don’t have to attend a lot of meetings. Granted, I get a lot of meeting invites, but I decline most of them. There’s less than a handful that I need to attend every week. Most of these meetings don’t require me to interact with the attendees, so I tend to go on walks during them.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;http://zoom.us/&quot;&gt;Zoom&lt;/a&gt; at Okta for all of our meetings and its mobile app works quite well. I can dial into the meeting, listen while I walk, and look at the video feed on my phone if there’s something that catches my attention. I’ve found that I actually pay more attention to meetings when I’m walking than when I’m standing at my desk.&lt;/p&gt;

&lt;p&gt;Obviously, this doesn’t work when you’re a presenter in the meeting. However, for most other meetings it does, and you’re killing two birds with one stone (daily exercise + work)!&lt;/p&gt;

&lt;h2 id=&quot;take-care-of-yourself&quot;&gt;Take Care of Yourself&lt;/h2&gt;

&lt;p&gt;You’ve heard it all before. Eat well, drink less, exercise more, and get a good night’s rest. These are all excellent recommendations but can be challenging to do, especially on the road. The easiest way to take care of yourself is not to travel.&lt;/p&gt;

&lt;p&gt;An excellent way to get started taking care of yourself is to monitor your health, so you can see where to improve. That’s why I built &lt;a href=&quot;https://www.21-points.com&quot;&gt;21-Points Health&lt;/a&gt; as part of the &lt;a href=&quot;https://jhipster-book.com&quot;&gt;JHipster Mini-Book&lt;/a&gt;. I still use 21-Points Health, but I’ve also started to use &lt;a href=&quot;https://gyrosco.pe&quot;&gt;Gyroscope&lt;/a&gt; to automate my health monitoring. Gyroscope integrates with &lt;a href=&quot;https://www.rescuetime.com&quot;&gt;RescueTime&lt;/a&gt; to track your productivity on your computer too.&lt;/p&gt;

&lt;p&gt;I’ve also started reading Joe Kutner’s &lt;a href=&quot;http://healthyprog.com/&quot;&gt;Healthy Programmer&lt;/a&gt; book. It’s chock full of useful tips like the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take a break every hour, even if it’s just for five minutes&lt;/li&gt;
  &lt;li&gt;20-20-20: to prevent eye fatigue, every 20 minutes stare at something 20 feet away for 20 seconds&lt;/li&gt;
  &lt;li&gt;Exercise in short bursts, with more intensity and purpose. 20-minute brisk walks are highly recommended&lt;/li&gt;
  &lt;li&gt;Eat five portions of fruit and vegetables per day&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;go-on-vacation-often&quot;&gt;Go on Vacation. Often.&lt;/h2&gt;

&lt;p&gt;I work hard, and I play hard. My family loves to do ski weekends, road trips, and whitewater raft trips. I’m lucky to work at a company like Okta that has an unlimited vacation policy. I’ve heard that most unlimited vacation policies don’t work for people because they tend to work more, and take fewer vacations.&lt;/p&gt;

&lt;p&gt;I take full advantage of our unlimited vacation policy and make sure to take a week of vacation during every other six-week plan. Last summer I was on vacation three out of six weeks at one point! I believe many Europeans do it right when they take the entire month of August off.&lt;/p&gt;

&lt;p&gt;If you work for a company that only has two weeks of vacation, it’s time to find a new employer.&lt;/p&gt;

&lt;p&gt;With the remote lifestyle, it’s easy to take your family on vacation and work while you’re there. I’ve learned this is a terrible idea because I used to do it all the time. As the activities leader for my family, if I’m on my laptop, they’re on their screens. That’s no way to spend your vacation.&lt;/p&gt;

&lt;h2 id=&quot;how-has-this-helped-me&quot;&gt;How has this helped me?&lt;/h2&gt;

&lt;p&gt;I believe these tips can help any developer achieve massive productivity. However, they’re likely to benefit Developer Advocates more, since that’s what I do on a daily basis. If your company believes advocates should be on the road all the time, maybe you should revisit that policy and add more content to your blog instead.&lt;/p&gt;

&lt;p&gt;Yes, some folks can travel all the time &lt;em&gt;and&lt;/em&gt; blog, but that’s a tough lifestyle to maintain long-term.&lt;/p&gt;

&lt;p&gt;I know these tips work for me because I recently had my annual review with my boss. His only advice was to “slow down, and stop working so much, especially when traveling.” Since I’m not traveling as much this year, that’s easy to do!&lt;/p&gt;

&lt;p&gt;Developers are passionate about productivity, and we are too! Follow the &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;@oktadev&lt;/a&gt; team on Twitter, and we’ll share tips and tricks as we come across them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post was partially inspired by my &lt;a href=&quot;https://raibledesigns.com/rd/entry/tips_for_productivity_and_happiness&quot;&gt;Tips for Happiness and Productivity&lt;/a&gt; blog post I wrote back in April 2006. I still believe many of these tips to be true.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Mar 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/03/19/how-to-be-productive-at-work</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/03/19/how-to-be-productive-at-work</guid>
      </item>
    
      <item>
        <title>Build a React Native Application and Authenticate with OAuth 2.0</title>
        <description>&lt;p&gt;With Okta and OpenID Connect (OIDC) you can easily integrate authentication into a React Native application and never have to build it yourself again. OIDC allows you to authenticate directly against the &lt;a href=&quot;https://developer.okta.com/product/&quot;&gt;Okta API&lt;/a&gt;, and this article shows you how to do just that in a React Native application. Today you’ll see how to log a user into your React Native application using an OIDC redirect via the AppAuth library.&lt;/p&gt;

&lt;p&gt;React Native is a pretty slick framework. Unlike Ionic and other hybrid mobile frameworks, it allows you to use web technologies (React and JavaScript) to build native mobile apps. There is no browser or WebView involved, so developing a mobile app with React Native is similar to using the native SDK in that you’ll do all your testing on an emulator or device. There is no way to test it in your browser like there is with Ionic. This can be a benefit in that you don’t have to write code that works in-browser and on-device separately.&lt;/p&gt;

&lt;p&gt;If you look at Google Trends, you can see that React Native is even more popular than Android and iOS for native development!&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://ssl.gstatic.com/trends_nrtr/1294_RC01/embed_loader.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt; trends.embed.renderExploreWidget(&quot;TIMESERIES&quot;, {&quot;comparisonItem&quot;:[{&quot;keyword&quot;:&quot;ios development&quot;,&quot;geo&quot;:&quot;&quot;,&quot;time&quot;:&quot;today 12-m&quot;},{&quot;keyword&quot;:&quot;android development&quot;,&quot;geo&quot;:&quot;&quot;,&quot;time&quot;:&quot;today 12-m&quot;},{&quot;keyword&quot;:&quot;react native&quot;,&quot;geo&quot;:&quot;&quot;,&quot;time&quot;:&quot;today 12-m&quot;}],&quot;category&quot;:0,&quot;property&quot;:&quot;&quot;}, {&quot;exploreQuery&quot;:&quot;q=ios%20development,android%20development,react%20native&amp;date=today 12-m,today 12-m,today 12-m&quot;,&quot;guestPath&quot;:&quot;https://trends.google.com:443/trends/embed/&quot;}); &lt;/script&gt;

&lt;p&gt;Today I’m going to show you how to develop a React Native app with the latest and greatest releases. At the time of this writing, that’s React 16.2.0 and React Native 0.54.0. You’ll create a new app, add &lt;a href=&quot;https://appauth.io/&quot;&gt;AppAuth&lt;/a&gt; for authentication, authenticate with Okta, and see it running on both iOS and Android.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;AppAuth is a client SDK for native apps to authenticate and authorize end-users using OAuth 2.0 and OpenID Connect. Available for iOS, macOS, Android and Native JS environments, it implements modern security and usability &lt;a href=&quot;https://tools.ietf.org/html/rfc8252&quot;&gt;best practices&lt;/a&gt; for native app authentication and authorization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;create-your-react-native-application&quot;&gt;Create Your React Native Application&lt;/h2&gt;

&lt;p&gt;React has a &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-app&lt;/code&gt; command-line tool (CLI) that you can use to create new React apps. React Native has a similar tool called &lt;a href=&quot;https://github.com/react-community/create-react-native-app&quot;&gt;Create React Native App&lt;/a&gt;. Before you install it, make sure you have &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node&lt;/a&gt; v6 or later installed.&lt;/p&gt;

&lt;p&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react-native-app&lt;/code&gt; and create a new project called &lt;code class=&quot;highlighter-rouge&quot;&gt;okta-rn&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; create-react-native-app
create-react-native-app okta-rn
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;okta-rn
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running these commands will result in your terminal prompting you with some options:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;To view your app with live reloading, point the Expo app to this QR code.
You'll find the QR scanner on the Projects tab of the app.

[QR Code]

Or enter this address in the Expo app's search bar:

  exp://172.31.98.12:19000

Your phone will need to be on the same local network as this computer.
For links to install the Expo app, please visit https://expo.io.

Logs from serving your app will appear here. Press Ctrl+C at any time to stop.

 › Press a to open Android device or emulator, or i to open iOS emulator.
 › Press q to display QR code.
 › Press r to restart packager, or R to restart packager and clear cache.
 › Press d to toggle development mode. (current mode: development)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re on a Mac, press &lt;strong&gt;i&lt;/strong&gt; to open iOS emulator. You will be prompted to install/open with Expo, then presented with the rendered &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/open-in-expo-99aa3f61ee9cea9951ca8b232460f501ef3f1a3c07cd4f47c49c3b2b4717afe0.png&quot; alt=&quot;Open in Expo&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/default-page-bd56cd1311197957c4d096855eea8f6f93687d14c37e72b39b489beba0dcfbea.png&quot; alt=&quot;Rendered App.js&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you’re on Windows or Linux, I’d suggest trying the Android emulator or your Android device (if you have one). If it doesn’t work, don’t worry, I’ll show you how to make that work later on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; You can use TypeScript instead of JavaScript in your React Native app using Microsoft’s &lt;a href=&quot;https://github.com/Microsoft/TypeScript-React-Native-Starter&quot;&gt;TypeScript React Native Starter&lt;/a&gt;. If you decide to go this route, I’d recommend following the steps to convert your app after you’ve completed this tutorial.&lt;/p&gt;

&lt;h2 id=&quot;react-native-and-oauth-20&quot;&gt;React Native and OAuth 2.0&lt;/h2&gt;

&lt;p&gt;In this example, I’ll use &lt;a href=&quot;https://github.com/FormidableLabs/react-native-app-auth&quot;&gt;React Native App Auth&lt;/a&gt;, a library created by &lt;a href=&quot;http://formidable.com/&quot;&gt;Formidable&lt;/a&gt;. The reason I’m using this library is three-fold: 1) they provide an excellent &lt;a href=&quot;https://github.com/FormidableLabs/react-native-app-auth/tree/master/Example&quot;&gt;example&lt;/a&gt; that I was able to make work in just a few minutes, 2) it uses AppAuth (a mature OAuth client implementation), and 3) I was unable to get anything else working.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I tried &lt;a href=&quot;https://github.com/fullstackreact/react-native-oauth&quot;&gt;react-native-oauth&lt;/a&gt; but discovered it required using an existing provider before adding a new one. I only wanted to have Okta as a provider. Also, it’s high number of issues and pull requests served as a warning sign.&lt;/li&gt;
  &lt;li&gt;I tried &lt;a href=&quot;https://github.com/adamjmcgrath/react-native-simple-auth&quot;&gt;react-native-simple-auth&lt;/a&gt; but had problems getting the deprecated Navigator component to work with the latest React Native release.&lt;/li&gt;
  &lt;li&gt;I tried doing &lt;a href=&quot;https://medium.com/@jtremback/oauth-2-with-react-native-c3c7c64cbb6d&quot;&gt;this OAuth 2 with React Native tutorial&lt;/a&gt;, but also had problems redirecting back to my app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-native-application-in-okta&quot;&gt;Create Native Application in Okta&lt;/h3&gt;

&lt;p&gt;Before you add AppAuth to your React Native application, you’ll need an app to authorize against. If you don’t have a free-forever Okta Developer account, &lt;a href=&quot;https://developer.okta.com/signup/&quot;&gt;get one today&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Log in to your Okta Developer account and navigate to &lt;strong&gt;Applications&lt;/strong&gt; &amp;gt; &lt;strong&gt;Add Application&lt;/strong&gt;. Click &lt;strong&gt;Native&lt;/strong&gt; and click &lt;strong&gt;Next&lt;/strong&gt;. Give the app a name you’ll remember (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;React Native&lt;/code&gt;), select &lt;code class=&quot;highlighter-rouge&quot;&gt;Refresh Token&lt;/code&gt; as a grant type, in addition to the default &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization Code&lt;/code&gt;. Copy the &lt;strong&gt;Login redirect URI&lt;/strong&gt; (e.g., &lt;code class=&quot;highlighter-rouge&quot;&gt;com.oktapreview.dev-158606:/callback&lt;/code&gt;) and save it somewhere. You’ll need this value when configuring your app.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Done&lt;/strong&gt; and you should see a client ID on the next screen. Copy and save this value as well.&lt;/p&gt;

&lt;h3 id=&quot;add-react-native-appauth-for-authentication&quot;&gt;Add React Native AppAuth for Authentication&lt;/h3&gt;

&lt;p&gt;You’ll need to “eject” the native configuration for your app, which is normally hidden by create-react-native-app.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run eject
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When prompted to answer questions, use the following answers:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Question&lt;/th&gt;
      &lt;th&gt;Answer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;How would you like to eject from create-react-native-app?&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React Native&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;What should your app appear as on a user’s home screen?&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Okta RN&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;What should your Android Studio and Xcode projects be called?&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OktaRN&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To install App Auth for React Native, run the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i react-native-app-auth@2.2.0
npm i
react-native link
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running these commands, you have to &lt;a href=&quot;https://github.com/FormidableLabs/react-native-app-auth#setup&quot;&gt;configure the native iOS projects&lt;/a&gt;. I’ve copied the steps below for your convenience.&lt;/p&gt;

&lt;h3 id=&quot;ios-setup&quot;&gt;iOS Setup&lt;/h3&gt;

&lt;p&gt;React Native App Auth depends on &lt;a href=&quot;https://github.com/openid/AppAuth-iOS&quot;&gt;AppAuth-ios&lt;/a&gt;, so you have to configure it as a dependency. The easiest way to do that is to use &lt;a href=&quot;https://guides.cocoapods.org/using/getting-started.html&quot;&gt;CocoaPods&lt;/a&gt;. To install CocoaPods, run the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; directory of your project that specifies AppAuth-ios as a dependency. Make sure that &lt;code class=&quot;highlighter-rouge&quot;&gt;OktaRN&lt;/code&gt; matches the app name you specified when running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run eject&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;platform :ios, '11.0'

target 'OktaRN' do
  pod 'AppAuth', '&amp;gt;= 0.91'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; directory. This can take a while the first time, even on a fast connection. Now is a good time to grab a coffee or a scotch! 🥃&lt;/p&gt;

&lt;p&gt;Open your project in Xcode by running &lt;code class=&quot;highlighter-rouge&quot;&gt;open OktaRN.xcworkspace&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;If you intend to support iOS 10 and older, you need to define the supported redirect URL schemes in &lt;code class=&quot;highlighter-rouge&quot;&gt;ios/OktaRN/Info.plist&lt;/code&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;$(PRODUCT_BUNDLE_IDENTIFIER)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;{yourReversedOktaDomain}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Below is what mine looks like after I changed my app identifier and added this key.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleIdentifier&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.okta.developer.reactnative.$(PRODUCT_NAME:rfc1034identifier)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLTypes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;$(PRODUCT_BUNDLE_IDENTIFIER)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CFBundleURLSchemes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.oktapreview.dev-158606&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.h&lt;/code&gt; in your Xcode project (OktaRN &amp;gt; OktaRN &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.h&lt;/code&gt;) and add the lines with the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; next to them below.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gi&quot;&gt;+ @protocol OIDAuthorizationFlowSession;
&lt;/span&gt;
  @interface AppDelegate : UIResponder &amp;lt;UIApplicationDelegate&amp;gt;
&lt;span class=&quot;gi&quot;&gt;+ @property(nonatomic, strong, nullable) id&amp;lt;OIDAuthorizationFlowSession&amp;gt; currentAuthorizationFlow;
&lt;/span&gt;  @property (nonatomic, strong) UIWindow *window;
  @end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This property holds the authorization flow information that started before you redirect to Okta. After Okta authorizes you, it redirects to the &lt;code class=&quot;highlighter-rouge&quot;&gt;redirect_uri&lt;/code&gt; that’s passed in.&lt;/p&gt;

&lt;p&gt;The authorization flow starts from an &lt;code class=&quot;highlighter-rouge&quot;&gt;openURL()&lt;/code&gt; app delegate method. To add it, open &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.m&lt;/code&gt; and import &lt;code class=&quot;highlighter-rouge&quot;&gt;AppAuth.h&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;AppAuth.h&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then at the bottom of the class (before &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;), add the &lt;code class=&quot;highlighter-rouge&quot;&gt;openURL()&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;openURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_currentAuthorizationFlow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resumeAuthorizationFlowWithURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_currentAuthorizationFlow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-your-react-native-app&quot;&gt;Build Your React Native App&lt;/h2&gt;

&lt;p&gt;Replace the code in &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; with the following JavaScript. This code allows you to authorize, refresh your access token, and revoke it.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UIManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LayoutAnimation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;revoke&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-native-app-auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ButtonContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Heading&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./components'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;UIManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLayoutAnimationEnabledExperimental&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;UIManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLayoutAnimationEnabledExperimental&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scopes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'openid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'profile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'offline_access'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hasLoggedInOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://{yourOktaDomain}.oktapreview.com/oauth2/default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{clientId}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redirectUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.{yourReversedOktaDomain}:/callback'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;additionalParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'openid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'profile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'offline_access'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hasLoggedInOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;animateState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;LayoutAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;easeInEaseOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;authorize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animateState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;hasLoggedInOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Failed to log in'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
              
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animateState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessTokenExpirationDate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Failed to refresh token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;revoke&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;revoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tokenToRevoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;sendClientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animateState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;Alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Failed to revoke token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Form.Label&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Form.Value&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Form.Label&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Form.Value&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Form.Label&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Form.Value&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Heading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasLoggedInOnce&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Goodbye.'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello, stranger.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Heading&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ButtonContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Authorize&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#017CC0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Refresh&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#24C2CB&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;revoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Revoke&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#EF525B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ButtonContainer&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Page&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure to adjust &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; with your settings.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const config = {
  issuer: 'https://{yourOktaDomain}.oktapreview.com/oauth2/default',
  clientId: '{clientId}',
  redirectUrl: 'com.{yourReversedOktaDomain}:/callback',
  ...
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; to use &lt;code class=&quot;highlighter-rouge&quot;&gt;OktaRN&lt;/code&gt; as the name of your app.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;AppRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'OktaRN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code uses &lt;a href=&quot;https://github.com/styled-components/styled-components&quot;&gt;styled-components&lt;/a&gt;, so you’ll need to install that as a dependency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Make sure to navigate into the root directory of your project before running the commands below.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i styled-components
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt; directory into your project’s root directory from Formidable’s example.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svn &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;https://github.com/FormidableLabs/react-native-app-auth/trunk/Example/components
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Grab the background image that’s referenced in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Page.js&lt;/code&gt; component too.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svn &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;https://github.com/FormidableLabs/react-native-app-auth/trunk/Example/assets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-on-ios-simulator&quot;&gt;Run on iOS Simulator&lt;/h3&gt;

&lt;p&gt;Run your app with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run ios&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should see a screen that says “Hello, stranger.” Click on &lt;strong&gt;Authorize&lt;/strong&gt;, and you’ll be prompted to continue or cancel.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/hello-66b967d2aea0c4ead301126613602623482ea310b93c41b9d68043807956a668.png&quot; alt=&quot;Hello, stranger&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/continue-72cc6e6f30d9456dde4a47949f67a4d804ead0a0b2f30d00106a50f4ea7f954c.png&quot; alt=&quot;Cancel or Continue&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Click &lt;strong&gt;Continue&lt;/strong&gt; and you should see an Okta sign-in form. Enter your credentials, and you’ll be redirected back to the application.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/okta-login-6c4c379db5ff7d5a5e6cc9410b719a47e5a0534f7d9cac6b1c8d1ef87c4a3dc3.png&quot; alt=&quot;Okta Sign-In&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/access-token-e9458e233082fd30cd491425979c6ecc1dbe8a840e2420337e88cde1a1a1b228.png&quot; alt=&quot;Access Token Info&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can click &lt;strong&gt;Refresh&lt;/strong&gt; to watch the values for the access token and expire date change.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; If animations happen slowly in iOS Simulator, toggle &lt;strong&gt;Debug&lt;/strong&gt; &amp;gt; &lt;strong&gt;Slow Animations&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;android-setup&quot;&gt;Android Setup&lt;/h3&gt;

&lt;p&gt;To configure the native Android project, start by upgrading the version of Gradle it uses.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;android
./gradlew wrapper &lt;span class=&quot;nt&quot;&gt;--gradle-version&lt;/span&gt; 4.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;React Native App Auth for Android depends on &lt;a href=&quot;https://github.com/openid/AppAuth-android&quot;&gt;AppAuth-android&lt;/a&gt;, but you need to add the correct Android Support library version to your project.&lt;/p&gt;

&lt;p&gt;Add the Google Maven repository to your &lt;code class=&quot;highlighter-rouge&quot;&gt;android/build.gradle&lt;/code&gt; and upgrade the Android Tools dependency:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.android.tools.build:gradle:3.0.1'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upgrade the &lt;code class=&quot;highlighter-rouge&quot;&gt;appcompat&lt;/code&gt; dependency in &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;25.3.1&lt;/code&gt; to match the one expected by AppAuth.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.android.support:appcompat-v7:25.3.1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remove &lt;code class=&quot;highlighter-rouge&quot;&gt;buildToolsVersion &quot;23.0.1&quot;&lt;/code&gt; as its no longer necessary.&lt;/p&gt;

&lt;p&gt;Update the &lt;code class=&quot;highlighter-rouge&quot;&gt;compileSdkVersion&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compileSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the &lt;code class=&quot;highlighter-rouge&quot;&gt;appAuthRedirectScheme&lt;/code&gt; property the &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultConfig&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;manifestPlaceholders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;appAuthRedirectScheme:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{yourReversedOktaDomain}'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After making this change, my &lt;code class=&quot;highlighter-rouge&quot;&gt;defaultConfig&lt;/code&gt; looks as follows.&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;applicationId&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.oktarn&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;minSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;targetSdkVersion&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;versionCode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;versionName&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ndk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;abiFilters&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;armeabi-v7a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x86&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;manifestPlaceholders&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;appAuthRedirectScheme:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.oktapreview.dev-158606'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-on-android&quot;&gt;Run on Android&lt;/h3&gt;

&lt;p&gt;To try it on an Android emulator, run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run android&lt;/code&gt;. If you don’t have a phone plugged in or an Android Virtual Device (AVD) running, you’ll see an error:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; What went wrong:
Execution failed &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;task &lt;span class=&quot;s1&quot;&gt;':app:installDebug'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; com.android.builder.testing.api.DeviceException: No connected devices!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To fix this, open Android Studio, choose &lt;strong&gt;open existing project&lt;/strong&gt;, and select the &lt;code class=&quot;highlighter-rouge&quot;&gt;android&lt;/code&gt; directory in your project. If you’re prompted to update anything, approve it.&lt;/p&gt;

&lt;p&gt;To create a new AVD, navigate to &lt;strong&gt;Tools&lt;/strong&gt; &amp;gt; &lt;strong&gt;Android&lt;/strong&gt; &amp;gt; &lt;strong&gt;AVD Manager&lt;/strong&gt;. Create a new Virtual Device and click Play. I chose a Pixel 2 as you can see from my settings below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/avd-pixel-2-b4bcf85e3239bb1fe3cf90e18e6ffaea6ae35bd44f0e9c477868c9139e9ab8b2.png&quot; alt=&quot;AVD Pixel 2&quot; width=&quot;800&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run android&lt;/code&gt; again. You should see a welcome screen and be able to authorize successfully.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/android-hello-059ee0a3972c0752d22d001ec095c6ae199da2d592a5583e0f227db4d4fe8b10.png&quot; alt=&quot;Hello, stranger&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/android-sign-in-be6915f81ec9adb8ea94aa7a651d45bb96b357488fa17d74907a37a4052430df.png&quot; alt=&quot;Okta Sign-In&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/android-access-token-637a3a63fe517eb8193961fca79d52e4197d192584755eecb9d896ca90f10503.png&quot; alt=&quot;Access Token on Android&quot; width=&quot;280&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; To fix &lt;code class=&quot;highlighter-rouge&quot;&gt;Configuration 'compile' in project ':app' is deprecated. Use 'implementation' instead.&lt;/code&gt;, change &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;implementation&lt;/code&gt;. More information can be found in &lt;a href=&quot;https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html&quot;&gt;Migrate to Android Plugin for Gradle 3.0.0&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;upgrade-to-the-latest-release-of-react-native&quot;&gt;Upgrade to the Latest Release of React Native&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.npmjs.com/package/react-native-git-upgrade&quot;&gt;react-native-git-upgrade&lt;/a&gt; tool is a handy way to upgrade your project to use the latest versions. Install it and run it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; react-native-git-upgrade
react-native-git-upgrade
npm i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, you can just change your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to have &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;react-native&quot;: &quot;0.54.2&quot;&lt;/code&gt; and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm i&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;get-and-view-an-id-token&quot;&gt;Get and View an ID Token&lt;/h3&gt;

&lt;p&gt;If you’d like to get an ID token in addition to an access token, add &lt;code class=&quot;highlighter-rouge&quot;&gt;idToken&lt;/code&gt; as a property of type &lt;code class=&quot;highlighter-rouge&quot;&gt;State&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; variable in &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;idToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;idToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then update the &lt;code class=&quot;highlighter-rouge&quot;&gt;authorize()&lt;/code&gt; method to set the property from &lt;code class=&quot;highlighter-rouge&quot;&gt;authState&lt;/code&gt;. You’ll want to add similar logic in the &lt;code class=&quot;highlighter-rouge&quot;&gt;refresh()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;revoke()&lt;/code&gt; methods.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;authorize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animateState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;hasLoggedInOnce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessTokenExpirationDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;idToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idToken&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Failed to log in'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To see what’s in your ID token, install &lt;a href=&quot;https://www.npmjs.com/package/buffer&quot;&gt;buffer&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i buffer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Import it at the top of &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'buffer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then change the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method to decode it.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwtBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwtBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'_'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decodedJwt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'base64'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idTokenJSON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decodedJwt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, add a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Form.Label&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Form.Value&amp;gt;&lt;/code&gt; row after the one that displays the access token.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ID Token&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.Label&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{JSON.stringify(state.idTokenJSON)}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.Value&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run ios&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run android&lt;/code&gt;) and you should see the claims in the ID token after authorizing with Okta. Below is a screenshot proving it works in iOS Simulator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/ios-id-token-fa76478fe93fa5a01eae360d06f75abf681e22937dd7df4fa924827c2db1a437.png&quot; alt=&quot;ID Token on iOS&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;call-an-api-with-your-access-token&quot;&gt;Call an API with Your Access Token&lt;/h3&gt;

&lt;p&gt;Now that you have an access token, what can you do with it? You can call an Okta-protected API with it in an &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header!&lt;/p&gt;

&lt;p&gt;I wrote about how to create a “Good Beers” API in &lt;a href=&quot;/blog/2017/12/06/bootiful-development-with-spring-boot-and-react&quot;&gt;Bootiful Development with Spring Boot and React&lt;/a&gt;. You can use the backend of that application to prove it works.&lt;/p&gt;

&lt;p&gt;Clone the project from GitHub and check out the &lt;code class=&quot;highlighter-rouge&quot;&gt;okta&lt;/code&gt; branch.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/oktadeveloper/spring-boot-react-example.git
git checkout okta
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modify &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-react-example/server/src/main/resources/application.properties&lt;/code&gt; to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;issuer&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;clientId&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;okta.oauth2.issuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;<span class="okta-preview-domain">https://{yourOktaDomain}.com</span>/oauth2/default&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;okta.oauth2.clientId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{clientId}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You’ll need to have &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java 8&lt;/a&gt; installed to run this Spring Boot application.&lt;/p&gt;

&lt;p&gt;Start the app by running &lt;code class=&quot;highlighter-rouge&quot;&gt;./mvnw&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Back to the React Native client. In &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;, add &lt;code class=&quot;highlighter-rouge&quot;&gt;beers&lt;/code&gt; as a property of &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;beers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set it to this same value in the &lt;code class=&quot;highlighter-rouge&quot;&gt;revoke()&lt;/code&gt; method. Add a &lt;code class=&quot;highlighter-rouge&quot;&gt;fetchGoodBeers()&lt;/code&gt; method that uses the access token to call the backend.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;fetchGoodBeers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// reset to id token if beers is already populated&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animateState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/good-beers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Authorization'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Bearer &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;animateState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; For this to work in the Android emulator (and on a real phone), you’ll need to change &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt; to your IP address.&lt;/p&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ButtonContainer&amp;gt;&lt;/code&gt; at the bottom, add a “Good Beers” button that allows you to call the API, as well as press it again to view the ID Token.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;accessToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetchGoodBeers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Good Beers'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ID Token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#008000&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modify the row where you display the ID token to show the JSON from the API.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Label&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{state.beers.length ? 'Good Beers' : 'ID Token'}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.Label&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{JSON.stringify(state.beers.length ? state.beers : state.idTokenJSON)}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Form&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.Value&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In iOS Simulator, press &lt;strong&gt;Command + R&lt;/strong&gt; to reload everything and you should see the JSON when you click on the &lt;strong&gt;Good Beers&lt;/strong&gt; button. You can reload in Android using &lt;strong&gt;Command + M&lt;/strong&gt; (on Mac, &lt;strong&gt;CTRL + M&lt;/strong&gt; on other operating systems).&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/good-beers-ios-5b86767375d3af847ce5d1c783cab3911372f49b70b4ba9c93bcac14ba0da1b0.png&quot; alt=&quot;Good Beers on iOS&quot; width=&quot;400&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/blog/react-native-app-auth/good-beers-android-36193795e927333bbf9d0871912e511b0511f07e7400999009af40c0627faafb.png&quot; alt=&quot;Good Beers on Android&quot; width=&quot;350&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; There is an &lt;a href=&quot;https://github.com/FormidableLabs/react-native-app-auth/issues/70&quot;&gt;open issue in react-native-app-auth&lt;/a&gt; about revoke not working with Okta because an &lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization&lt;/code&gt; header is not sent.&lt;/p&gt;

&lt;h2 id=&quot;learn-more-about-react-native-and-react&quot;&gt;Learn More about React Native and React&lt;/h2&gt;

&lt;p&gt;I hope you’ve enjoyed this whirlwind tour of how to do authentication with Okta and React Native. You can learn more about React Native on &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;its official site&lt;/a&gt;. You can also add to its ~60K stars &lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the source code for this application at &lt;a href=&quot;https://github.com/oktadeveloper/okta-react-native-app-auth-example&quot;&gt;https://github.com/oktadeveloper/okta-react-native-app-auth-example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re interested in seeing how to do regular React development with Okta, I encourage you to check out the following resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/03/30/react-okta-sign-in-widget&quot;&gt;Build a React Application with User Authentication in 15 Minutes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/10/19/build-a-preact-app-with-authentication&quot;&gt;Build a Preact App with Authentication&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2017/12/06/bootiful-development-with-spring-boot-and-react&quot;&gt;Bootiful Development with Spring Boot and React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any questions about this article, please hit me up on Twitter &lt;a href=&quot;https://twitter.com/mraible&quot;&gt;@mraible&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Mar 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/03/16/build-react-native-authentication-oauth-2</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/03/16/build-react-native-authentication-oauth-2</guid>
      </item>
    
      <item>
        <title>Hosting Our First Developer Conference, Iterate</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-front-wall-51b370aab015285f58682e4dceefa6fedde6b7bf6f1fb785917dd5c02dc81c4b.jpg&quot; alt=&quot;Iterate Front Wall&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A couple weeks ago (Tuesday, Feb. 27) &lt;a href=&quot;https://twitter.com/oktadev&quot;&gt;we&lt;/a&gt; officially ran the very first &lt;a href=&quot;https://www.iterateconf.io/&quot;&gt;Iterate Developer Conference&lt;/a&gt;. Not only did we have a ton of fun throwing a developer conference, but it was also a huge success and succeeded in hitting all of our goals.&lt;/p&gt;

&lt;p&gt;In this post I’ll recap the Iterate experience from start to finish, including some interesting things I learned along the way.&lt;/p&gt;

&lt;p&gt;If you weren’t lucky enough to attend Iterate, don’t worry – we’ll most definitely be running another one next year. &lt;!--In fact, if you’d like to be notified about next year’s Iterate conference you can give us your email on our [Iterate website](https://www.iterateconf.io/) and we’ll email you as we figure things out.--&gt;&lt;/p&gt;

&lt;p&gt;Want to know what Iterate was like? Check out our cool new recap video!&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe style=&quot;max-width: 100%&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/R4P_8bi8s9M&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;h2 id=&quot;why-host-a-developer-conference&quot;&gt;Why Host a Developer Conference?&lt;/h2&gt;

&lt;p&gt;Hosting a conference is a &lt;strong&gt;lot&lt;/strong&gt; of work. If you’re considering hosting a developer conference of your own, you should sit down and clearly think about the end goal: why are you considering hosting a developer conference in the first place? It’s going to be a lot of work, a lot of stress, and a lot of money. Return on investment is not guaranteed and tracking ROI can be murky at best.&lt;/p&gt;

&lt;p&gt;What it essentially boils down to is this: have a strong purpose and goal in mind before you dive into running a big event like a conference that will consume a massive amount of time and resources.&lt;/p&gt;

&lt;p&gt;So, &lt;em&gt;why&lt;/em&gt; did we decide to host a developer conference? Good question! ;) Okta, after all, already runs a large and successful conference called &lt;a href=&quot;https://www.okta.com/oktane18/&quot;&gt;Oktane&lt;/a&gt; each year. Why add another one?&lt;/p&gt;

&lt;p&gt;Oktane is primarily focused on Okta’s IT business and customers. While Oktane is a great event (Barack Obama AND Kumail Nanjiani will be &lt;a href=&quot;https://www.okta.com/oktane18/&quot;&gt;speaking there this year&lt;/a&gt;!) we wanted to host a separate conference that would truly embody the developer spirit and serve as a tribute to hackers everywhere.&lt;/p&gt;

&lt;p&gt;We wanted to host a conference that would:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Exist to serve developers and no one else.&lt;/li&gt;
  &lt;li&gt;Not be about marketing, sales, or self promotion. We wanted our new conference to be 100% genuine and authentic to the developer community in a way that is simply not possible when the goal of your event is to make money.&lt;/li&gt;
  &lt;li&gt;Motivate developers to improve themselves: get better at their craft, become more effective in their jobs and businesses, find new ways to keep their passions alive, and realize their full potential.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We decided upfront that we’d track our success through post-event surveys with carefully selected questions and gauge our success against a rubric.&lt;/p&gt;

&lt;p&gt;Once we had the goal in mind, we thought about what sort of event we wanted to craft that would allow us to succeed in our mission.&lt;/p&gt;

&lt;h2 id=&quot;building-a-mindful-developer-conference&quot;&gt;Building a Mindful Developer Conference&lt;/h2&gt;

&lt;p&gt;I’ve attended a ton of developer conferences in my life, both as an attendee and speaker. And while I absolutely love technology conferences – I’ve always felt like they’re typically missing something.&lt;/p&gt;

&lt;p&gt;Most developer conferences focus on a particular piece of technology (Pycon for Python, GopherCon for Go), but to my knowledge there are no developer conferences that focus on &lt;em&gt;all&lt;/em&gt; the skills you need to be an awesome developer.&lt;/p&gt;

&lt;p&gt;Being a great developer is about a whole lot more than just staying up-to-date with the latest frameworks and tools. It’s about staying passionate over many years, continuously automating and improving all aspects of your work (even when you’re busy), helping out your co-workers and collaborators, and many other &lt;em&gt;soft skills&lt;/em&gt; that are absolutely necessary to those of us seeking the topmost tiers of performance.&lt;/p&gt;

&lt;h3 id=&quot;picking-a-theme&quot;&gt;Picking a Theme&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-nate-847085f631790aa556ffc293f966b33e48a3b6982d499734eb3f11351a7831fc.jpg&quot; alt=&quot;Iterate Nate&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To ensure Iterate was an event we could all be proud of, &lt;a href=&quot;https://twitter.com/rdegges&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;https://twitter.com/nbarbettini&quot;&gt;four&lt;/a&gt; &lt;a href=&quot;https://twitter.com/LindsayB610&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;https://twitter.com/Alyssa_C&quot;&gt;us&lt;/a&gt; sat down to discuss our ideas and decided to build Iterate around the theme of constant improvement: &lt;em&gt;Iteration&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;From there we decided to have two talk tracks at Iterate: Build and Evolve.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-build-agenda-b78fcbafbbd5d7b9396fb7b475ebc151d058ce352c031ee021941ef2b8233b4b.jpg&quot; alt=&quot;Iterate Build Agenda&quot; width=&quot;300&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Build was our technical track consisting of four carefully selected topics that educated the audience about what’s happening at the bleeding edge of technology. What are the latest and most important things to know for frontend developers and backend developers? What should developers know about security to stay relevant and build secure applications? What are other important aspects of development that are rapidly changing?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-evolve-agenda-ddd493392c80209e2badc71ec0094c20b3c8ee3d74020d2f5eda1ca86a594f81.jpg&quot; alt=&quot;Iterate Evolve Agenda&quot; width=&quot;300&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Evolve was our culture track that consisted of four talks about improving yourself as a developer in non-technical ways: measuring and automating your life so you can tweak what doesn’t work and double down on what does, how to stay passionate over the long haul, how to build a team and culture at your company that enables &lt;em&gt;everyone&lt;/em&gt; to be a 10x developer, and also how to be massively productive by discarding management norms and working in innovative ways.&lt;/p&gt;

&lt;h3 id=&quot;making-your-conference-feel-special&quot;&gt;Making Your Conference Feel Special&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-fun-536d8564d4c0e352dbda38ddb98482709ea156b4a5cd92f1731bb4ac21308750.jpg&quot; alt=&quot;Iterate Fun&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we had our tracks defined and topics planned out in a way that made sense, we started working on all the details that would make Iterate truly unique. We pulled in ideas from the best conferences we’ve attended in the past, and threw in some new ideas of our own.&lt;/p&gt;

&lt;p&gt;I, for instance, was really adamant about starting the conference around lunch time (something that Heroku did with their &lt;a href=&quot;https://blog.heroku.com/waza-2013&quot;&gt;Waza&lt;/a&gt; conference, hands down the best developer event of all time). I abhor waking up early to make it to events that start at 8 or 9am.&lt;/p&gt;

&lt;p&gt;We wanted our attendees to show up to Iterate awake and refreshed, not sluggish from just waking up and commuting to the venue. Starting with lunch would give attendees a chance to make friends and hang out before diving into technical talks and intense focus.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-zoltar-6632cda2be2d0190aa9d046bd413885fa42cc3cb723b9924470665cb98515b09.jpg&quot; alt=&quot;Iterate Zoltar&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To stay true to our mission of being authentic and focusing on building a hacker friendly event, we also decided to not do any self promotion: we didn’t have typical vendor booths and we didn’t focus on lead collection activities.&lt;/p&gt;

&lt;p&gt;Instead: we partnered with some of the best developer companies on the planet: &lt;a href=&quot;https://www.twilio.com/&quot;&gt;Twilio&lt;/a&gt;, &lt;a href=&quot;https://www.algolia.com/&quot;&gt;Algolia&lt;/a&gt;, &lt;a href=&quot;https://www.atlassian.com/&quot;&gt;Atlassian&lt;/a&gt;, and the &lt;a href=&quot;https://js.foundation/&quot;&gt;JS Foundation&lt;/a&gt; who each crafted their own “experiences” for attendees to enjoy.&lt;/p&gt;

&lt;p&gt;Each of our partner companies really &lt;em&gt;understand&lt;/em&gt; developers and what we were trying to do which helped make the event really special. &amp;gt;:) We only work with the best!&lt;/p&gt;

&lt;p&gt;In short: we tried our best to make Iterate something truly unique and appealing to our audience.&lt;/p&gt;

&lt;h2 id=&quot;the-iterate-experience&quot;&gt;The Iterate Experience&lt;/h2&gt;

&lt;p&gt;When the big day finally came, everything really came together nicely.&lt;/p&gt;

&lt;p&gt;After lunch, we started the conference off in the main room. Every attendee found a copy of Jeff Atwood’s book, &lt;a href=&quot;http://amzn.to/2Hni9SE&quot;&gt;Effective Programming: More Than Writing Code&lt;/a&gt;, on their seat. This is &lt;em&gt;the book&lt;/em&gt; on writing quality software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-jeff-atwood-book-888dbf0aa1816db328dbbddbde5c5f70248d0a81ac9f515f0ab819d349a382a2.jpg&quot; alt=&quot;Jeff Atwood's Book at Iterate &quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We opened the conference up with an AWESOME intro video (which we’ll upload soon) set to the &lt;a href=&quot;https://www.youtube.com/watch?v=vlEN8svyHj8&quot;&gt;best programming music ever made&lt;/a&gt; and a great talk by &lt;a href=&quot;https://twitter.com/salatzar&quot;&gt;Alex Salazar&lt;/a&gt; introducing the conference and setting the tone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-alex-f301a7d265a676c018c2f927457c16cabdcbd17bb16494c6b4fd2aaea64ba2a9.jpg&quot; alt=&quot;Iterate Alex&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The intro video is a story in and of itself, but imagine a huge LED wall and a pitch black stage. Then imagine a terminal tinted green (like those old school CRT monitors). After a few seconds you see some typing and a programmer opens a file and starts writing cryptic Python code. A moment later the program is finished and the newly created program runs. Queue a stream of slowly printing ASCII art which prints a welcome message and has some hidden hacker emblems. =) Finally, the program introduces the first speaker of the day and slowly fades away. It was pretty epic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-jeff-atwood-1c69010c25e78c79670b19c6bbb0c26444991141abb88867093612b35aec3f8a.jpg&quot; alt=&quot;Iterate Jeff Atwood&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.codinghorror.com/&quot;&gt;Jeff Atwood&lt;/a&gt;, co-founder of &lt;a href=&quot;https://stackoverflow.com/&quot;&gt;StackOverflow&lt;/a&gt; and &lt;a href=&quot;https://www.discourse.org/&quot;&gt;Discourse&lt;/a&gt;, as well as one of the most influential developers of all time then gave an &lt;a href=&quot;https://www.youtube.com/watch?v=vrKTSg5gWN4&quot;&gt;amazing keynote&lt;/a&gt; about crafting software. If you’re a software developer, you really owe it to yourself to watch his talk: it was absolutely fantastic for anyone who’s building programs that people interact with.&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;&lt;iframe style=&quot;max-width: 100%&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vrKTSg5gWN4&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;Once the keynote had finished, attendees split up into the two tracks (Build and Evolve) and the first round of talks got started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-attendees-e08ea981203a4c15fec3b241739082bc71ae30662e4f97410d9d944fcc3b4141.jpg&quot; alt=&quot;Iterate Attendees&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;During breaks attendees went out into the main hall to grab snacks (&lt;em&gt;we had awesome food!&lt;/em&gt;) and partake in the partner experiences:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Twilio had baristas&lt;/li&gt;
  &lt;li&gt;Algolia brought a massive Zoltar machine that spat out developer fortunes&lt;/li&gt;
  &lt;li&gt;Atlassian built a programmer trivia game and gave away prizes&lt;/li&gt;
  &lt;li&gt;The JS Foundation had popcorn and puns&lt;/li&gt;
  &lt;li&gt;We (Okta) hosted a really fun photo booth&lt;/li&gt;
  &lt;li&gt;We (&lt;a href=&quot;https://www.okta.com/okta-for-good/&quot;&gt;Okta For Good&lt;/a&gt;) also hosted a donation station where developers could pledge to either:
    &lt;ul&gt;
      &lt;li&gt;Donate money to the &lt;a href=&quot;https://opencollective.com/opensource&quot;&gt;Open Source Collective&lt;/a&gt;, a fund that distributes money to open source projects in need of funding&lt;/li&gt;
      &lt;li&gt;Donate their time towards contributing to an open source project: writing docs, fixing bugs, or adding features&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the conference talks were over (each track consisted of four talks), we turned the main conference hall into a big party. Everyone hung out, made friends, and had a good time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-google-home-a62c34b39285c817940041162e93eef101f14f688a9e8458a1ef8c73322718fb.jpg&quot; alt=&quot;Iterate Google Home&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Throughout the day, attendees also got a pretty cool Iterate t-shirt and Google Home Mini to take home with them as a thank you for coming. People loved this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: If you want to watch some of the Iterate talks, you should go check them out on our &lt;a href=&quot;https://www.youtube.com/watch?v=vrKTSg5gWN4&amp;amp;list=PLshTZo9V1-aGWLr7Yu--kxr9x7P8OzSHX&quot;&gt;Developer YouTube Channel&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;the-review&quot;&gt;The Review&lt;/h2&gt;

&lt;p&gt;Once Iterate was all wrapped up the following week, the conference team got together to discuss the event, what worked well and what didn’t.&lt;/p&gt;

&lt;p&gt;Based on what we heard from attendees, we succeeded in doing what we set out to do: throw an authentic developer conference that got attendees excited and motivated to continue fine-tuning their craft.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-group-383a79e0bc29a5b2a8d3c9f79746d449037ff74c890917779c01585aaa816eb9.jpg&quot; alt=&quot;Iterate Group&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my personal Iterate experience, I could see that all the attendees had a really good time. Everyone I spoke with said they loved the conference, the talks, the “vibe”, and had a great time. I heard at least 20 different developers say they were really motivated and hyped to go write some software – that made me happy. One awesome attendee even wrote up a &lt;a href=&quot;http://codyo.com/blog/attending-oktas-iterate-conf&quot;&gt;recap of the event&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;While there were a few minor things we all thought we could do better next time, the overall sentiment was very positive. Looking over the event and all the responses from attendees, we all felt pretty damn proud being part of the Iterate team. =)&lt;/p&gt;

&lt;p&gt;Iterate was a ton of fun, and all of us helping put it together had a blast. I want to give a massive shout-out to some of the core crewmembers who really made it all happen (in no particular order):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/Alyssa_C&quot;&gt;Alyssa Smrekar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/LindsayB610&quot;&gt;Lindsay Brunner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/nbarbettini&quot;&gt;Nate Barbettini&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/rebecca-haugen-gagnon-14bb9158/&quot;&gt;Rebecca Gagnon&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And &lt;a href=&quot;https://twitter.com/BattenKatie&quot;&gt;Katie Batten&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/iterate/iterate-staff-251efee0281c352ceca56556f9713bf0da9be79ed950bac21c4b0d903b55bd80.jpg&quot; alt=&quot;Iterate Staff&quot; width=&quot;500&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y’all are awesome &amp;gt;:D&lt;/p&gt;

&lt;p&gt;If you’re thinking about throwing a conference of your own, feel free to drop a comment below or &lt;a href=&quot;mailto:randall.degges@okta.com&quot;&gt;shoot me&lt;/a&gt; an email.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Mar 2018 00:00:00 -0500</pubDate>
        <link>https://developer.okta.com/blog/2018/03/14/hosting-our-first-developer-conference-iterate</link>
        <guid isPermaLink="true">https://developer.okta.com/blog/2018/03/14/hosting-our-first-developer-conference-iterate</guid>
      </item>
    
  </channel>
</rss>
